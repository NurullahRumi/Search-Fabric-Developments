/**
 *This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.
 */
package mu.pfs.tt1000wb.fabricstockservice.controller;

import mu.pfs.tt1000wb.fabricstockservice.FabricStockService;
import java.lang.String;
import java.lang.Double;
import javax.servlet.http.HttpServletRequest;
import mu.pfs.tt1000wb.fabricstockservice.FabricStockService.AddPantone;
import java.util.List;
import mu.pfs.tt1000wb.fabricstockservice.FabricStockService.ColourLibraries;
import mu.pfs.tt1000wb.fabricstockservice.FabricStockService.CompareColours;
import java.lang.Integer;
import mu.pfs.tt1000wb.fabricstockservice.FabricStockService.StockFabrics;
import mu.pfs.tt1000wb.fabricstockservice.FabricStockService.YarnDyeStock;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.MediaType;
import org.springframework.beans.factory.annotation.Autowired;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

@RestController
@RequestMapping(value = "/fabricStock")
public class FabricStockController {

    @Autowired
    private FabricStockService fabricStockService;

    @RequestMapping(value = "/addPantone", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<AddPantone> getAddPantone(@RequestParam(value = "p_prgid", required = false) String p_prgid, @RequestParam(value = "p_userid", required = false) String p_userid, @RequestParam(value = "p_pantone", required = false) String p_pantone, @RequestParam(value = "p_pantoneCat", required = false) String p_pantoneCat, @RequestParam(value = "p_labL", required = false) Double p_labL, @RequestParam(value = "p_labA", required = false) Double p_labA, @RequestParam(value = "p_labB", required = false) Double p_labB, @RequestParam(value = "p_option", required = false) String p_option, HttpServletRequest request) {
        return fabricStockService.getAddPantone(p_prgid, p_userid, p_pantone, p_pantoneCat, p_labL, p_labA, p_labB, p_option, request);
    }

    @RequestMapping(value = "/colourLibraries", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<ColourLibraries> getColourLibraries(@RequestParam(value = "p_labL", required = false) Double p_labL, @RequestParam(value = "p_labA", required = false) Double p_labA, @RequestParam(value = "p_labB", required = false) Double p_labB, @RequestParam(value = "p_ToleranceDeltaE", required = false) Double p_ToleranceDeltaE, @RequestParam(value = "p_search_opt", required = false) String p_search_opt, @RequestParam(value = "p_labref", required = false) String p_labref, @RequestParam(value = "p_value", required = false) String p_value, @RequestParam(value = "hexcolor", required = false) String hexcolor, HttpServletRequest request) {
        return fabricStockService.getColourLibraries(p_labL, p_labA, p_labB, p_ToleranceDeltaE, p_search_opt, p_labref, p_value, hexcolor, request);
    }

    @RequestMapping(value = "/comparecolours", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<CompareColours> getCompareColours(@RequestParam(value = "pLabL1", required = false) Double pLabL1, @RequestParam(value = "pLabA1", required = false) Double pLabA1, @RequestParam(value = "pLabB1", required = false) Double pLabB1, @RequestParam(value = "pLabL2", required = false) Double pLabL2, @RequestParam(value = "pLabA2", required = false) Double pLabA2, @RequestParam(value = "pLabB2", required = false) Double pLabB2, @RequestParam(value = "hexcolor1", required = false) String hexcolor1, @RequestParam(value = "hexcolor2", required = false) String hexcolor2, HttpServletRequest request) {
        return fabricStockService.getCompareColours(pLabL1, pLabA1, pLabB1, pLabL2, pLabA2, pLabB2, hexcolor1, hexcolor2, request);
    }

    @RequestMapping(value = "/hexFromLab", produces = "application/json", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public String getHexFromLab(@RequestParam(value = "lab", required = false) String lab) {
        return fabricStockService.getHexFromLab(lab);
    }

    @RequestMapping(value = "/labFromHex", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public double[] getLabFromHex(@RequestParam(value = "hexcolor", required = false) String hexcolor) {
        return fabricStockService.getLabFromHex(hexcolor);
    }

    @RequestMapping(value = "/rgbFromHex", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public double[] getRgbFromHex(@RequestParam(value = "hexcolor", required = false) String hexcolor) {
        return fabricStockService.getRgbFromHex(hexcolor);
    }

    @RequestMapping(value = "/stockFabrics", method = RequestMethod.GET)
    public List<StockFabrics> getStockFabrics(@RequestParam(value = "pstore", required = false) String pstore, @RequestParam(value = "pordnum", required = false) String pordnum, @RequestParam(value = "pclicod", required = false) String pclicod, @RequestParam(value = "pfabtyp", required = false) String pfabtyp, @RequestParam(value = "pfabsubcat", required = false) String pfabsubcat, @RequestParam(value = "pskuno", required = false) String pskuno, @RequestParam(value = "pfabwgtFrom", required = false) Integer pfabwgtFrom, @RequestParam(value = "pfabwgtTo", required = false) Integer pfabwgtTo, @RequestParam(value = "pBsffabwgtfrom", required = false) Integer pBsffabwgtfrom, @RequestParam(value = "pBsffabwgtto", required = false) Integer pBsffabwgtto, @RequestParam(value = "pfabwid", required = false) Integer pfabwid, @RequestParam(value = "pinside", required = false) String pinside, @RequestParam(value = "poutside", required = false) String poutside, @RequestParam(value = "pcalstn", required = false) String pcalstn, @RequestParam(value = "pclrref", required = false) String pclrref, @RequestParam(value = "pstr", required = false) String pstr, @RequestParam(value = "pstripeId", required = false) String pstripeId, @RequestParam(value = "ptheme", required = false) String ptheme, @RequestParam(value = "penzyme", required = false) String penzyme, @RequestParam(value = "pteflon", required = false) String pteflon, @RequestParam(value = "pldecoroute", required = false) String pldecoroute, @RequestParam(value = "pfabdcodelist", required = false) String pfabdcodelist, @RequestParam(value = "pdccode", required = false) String pdccode, @RequestParam(value = "pmchgaufrom", required = false) Integer pmchgaufrom, @RequestParam(value = "pmchgauto", required = false) Integer pmchgauto, @RequestParam(value = "pYrncnt", required = false) String pYrncnt, @RequestParam(value = "pYrncps", required = false) String pYrncps, @RequestParam(value = "pYrnclr", required = false) String pYrnclr, @RequestParam(value = "pOriclr", required = false) String pOriclr, @RequestParam(value = "pYrnqlty", required = false) String pYrnqlty, @RequestParam(value = "pYrnsubqltya", required = false) String pYrnsubqltya, @RequestParam(value = "pYrnsubqltyb", required = false) String pYrnsubqltyb, @RequestParam(value = "pYrnffcod", required = false) String pYrnffcod, @RequestParam(value = "pYrnclrref", required = false) String pYrnclrref, @RequestParam(value = "pcpsField", required = false) String pcpsField, @RequestParam(value = "pcpstypA", required = false) String pcpstypA, @RequestParam(value = "pcpstypAFrom", required = false) Integer pcpstypAFrom, @RequestParam(value = "pcpstypATo", required = false) Integer pcpstypATo, @RequestParam(value = "pcpstypB", required = false) String pcpstypB, @RequestParam(value = "pcpstypBFrom", required = false) Integer pcpstypBFrom, @RequestParam(value = "pcpstypBTo", required = false) Integer pcpstypBTo, @RequestParam(value = "pcpstypC", required = false) String pcpstypC, @RequestParam(value = "pcpstypCFrom", required = false) Integer pcpstypCFrom, @RequestParam(value = "pcpstypCTo", required = false) Integer pcpstypCTo, @RequestParam(value = "psearchColour", required = false) String psearchColour, @RequestParam(value = "hexcolor", required = false) String hexcolor, @RequestParam(value = "Lclrcode", required = false) Double Lclrcode, @RequestParam(value = "Aclrcode", required = false) Double Aclrcode, @RequestParam(value = "Bclrcode", required = false) Double Bclrcode, @RequestParam(value = "ptoleranceDeltaE", required = false) Double ptoleranceDeltaE, HttpServletRequest request, @RequestParam(value = "pIntfabcertno", required = false) String pIntfabcertno, @RequestParam(value = "pCCFMatchcat", required = false) String pCCFMatchcat, @RequestParam(value = "pWarehouse", required = false) String pWarehouse, @RequestParam(value = "pPatternCode", required = false) String pPatternCode) {
        return fabricStockService.getStockFabrics(pstore, pordnum, pclicod, pfabtyp, pfabsubcat, pskuno, pfabwgtFrom, pfabwgtTo, pBsffabwgtfrom, pBsffabwgtto, pfabwid, pinside, poutside, pcalstn, pclrref, pstr, pstripeId, ptheme, penzyme, pteflon, pldecoroute, pfabdcodelist, pdccode, pmchgaufrom, pmchgauto, pYrncnt, pYrncps, pYrnclr, pOriclr, pYrnqlty, pYrnsubqltya, pYrnsubqltyb, pYrnffcod, pYrnclrref, pcpsField, pcpstypA, pcpstypAFrom, pcpstypATo, pcpstypB, pcpstypBFrom, pcpstypBTo, pcpstypC, pcpstypCFrom, pcpstypCTo, psearchColour, hexcolor, Lclrcode, Aclrcode, Bclrcode, ptoleranceDeltaE, request, pIntfabcertno, pCCFMatchcat, pWarehouse, pPatternCode);
    }

    @RequestMapping(value = "/yarnDyeStock", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public List<YarnDyeStock> getYarnDyeStock(@RequestParam(value = "pYrncnt", required = false) String pYrncnt, @RequestParam(value = "pCompo", required = false) String pCompo, @RequestParam(value = "pYrnCdes", required = false) String pYrnCdes, @RequestParam(value = "pYrnQual", required = false) String pYrnQual, @RequestParam(value = "pYrnYrnQualSubA", required = false) String pYrnYrnQualSubA, @RequestParam(value = "pYrnYrnQualSubB", required = false) String pYrnYrnQualSubB, @RequestParam(value = "pYrnffcod", required = false) String pYrnffcod, @RequestParam(value = "pYrnLabref", required = false) String pYrnLabref, @RequestParam(value = "pYrnlot", required = false) String pYrnlot, @RequestParam(value = "pAnycolor", required = false) String pAnycolor, @RequestParam(value = "hexcolor", required = false) String hexcolor, @RequestParam(value = "plabL", required = false) Double plabL, @RequestParam(value = "plabA", required = false) Double plabA, @RequestParam(value = "plabB", required = false) Double plabB, @RequestParam(value = "pToleranceDeltaE", required = false) Double pToleranceDeltaE, HttpServletRequest request) {
        return fabricStockService.getYarnDyeStock(pYrncnt, pCompo, pYrnCdes, pYrnQual, pYrnYrnQualSubA, pYrnYrnQualSubB, pYrnffcod, pYrnLabref, pYrnlot, pAnycolor, hexcolor, plabL, plabA, plabB, pToleranceDeltaE, request);
    }

    @RequestMapping(value = "/sampleJavaOperation", produces = "application/json", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "")
    public String sampleJavaOperation(@RequestParam(value = "name", required = false) String name, HttpServletRequest request) {
        return fabricStockService.sampleJavaOperation(name, request);
    }
}
