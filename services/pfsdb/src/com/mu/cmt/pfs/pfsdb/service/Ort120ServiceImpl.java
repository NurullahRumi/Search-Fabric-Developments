/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mu.cmt.pfs.pfsdb.Ort120;
import com.mu.cmt.pfs.pfsdb.Ort120Id;


/**
 * ServiceImpl object for domain model class Ort120.
 *
 * @see Ort120
 */
@Service("pfsdb.Ort120Service")
@Validated
public class Ort120ServiceImpl implements Ort120Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Ort120ServiceImpl.class);


    @Autowired
    @Qualifier("pfsdb.Ort120Dao")
    private WMGenericDao<Ort120, Ort120Id> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Ort120, Ort120Id> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Ort120 create(Ort120 ort120) {
        LOGGER.debug("Creating a new Ort120 with information: {}", ort120);

        Ort120 ort120Created = this.wmGenericDao.create(ort120);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ort120Created);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Ort120 getById(Ort120Id ort120Id) {
        LOGGER.debug("Finding Ort120 by id: {}", ort120Id);
        return this.wmGenericDao.findById(ort120Id);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Ort120 findById(Ort120Id ort120Id) {
        LOGGER.debug("Finding Ort120 by id: {}", ort120Id);
        try {
            return this.wmGenericDao.findById(ort120Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Ort120 found with id: {}", ort120Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public List<Ort120> findByMultipleIds(List<Ort120Id> ort120Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Ort120s by ids: {}", ort120Ids);

        return this.wmGenericDao.findByMultipleIds(ort120Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "pfsdbTransactionManager")
    @Override
    public Ort120 update(Ort120 ort120) {
        LOGGER.debug("Updating Ort120 with information: {}", ort120);

        this.wmGenericDao.update(ort120);
        this.wmGenericDao.refresh(ort120);

        return ort120;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Ort120 delete(Ort120Id ort120Id) {
        LOGGER.debug("Deleting Ort120 with id: {}", ort120Id);
        Ort120 deleted = this.wmGenericDao.findById(ort120Id);
        if (deleted == null) {
            LOGGER.debug("No Ort120 found with id: {}", ort120Id);
            throw new EntityNotFoundException(String.valueOf(ort120Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public void delete(Ort120 ort120) {
        LOGGER.debug("Deleting Ort120 with {}", ort120);
        this.wmGenericDao.delete(ort120);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Ort120> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Ort120s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Ort120> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Ort120s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service pfsdb for table Ort120 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service pfsdb for table Ort120 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}