/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.sql.Date;
import java.util.HashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;

import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@Service
public class PfsdbProcedureExecutorServiceImpl implements PfsdbProcedureExecutorService {

    private static final Logger LOGGER = LoggerFactory.getLogger(PfsdbProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("pfsdbWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcKn1610pk0_updccfUpdRem(String pprgid, String pusrid, String pfabdevno, Integer pfabitemseq, String pccfremarks) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("p_prgid", pprgid);
        params.put("p_usrid", pusrid);
        params.put("p_fabdevno", pfabdevno);
        params.put("p_fabitemseq", pfabitemseq);
        params.put("p_ccfremarks", pccfremarks);

        return procedureExecutor.executeNamedProcedure("ProcKn1610pk0_updccfUpdRem", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetEnzymeResponse executeGetEnzyme() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getEnzyme", params, GetEnzymeResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetYrnclrResponse executeGetYrnclr() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getYrnclr", params, GetYrnclrResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetYrncntResponse executeGetYrncnt() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getYrncnt", params, GetYrncntResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcSr741pk0requestSwatchResponse executeProcSr741pk0RequestSwatch(String psorders, String pteam, String pusrid, String pfabformat, String ppurpose, Double pquantity, String puom, String plcnstrcod) {
        Map<String, Object> params = new HashMap<>(10);

        params.put("P_Sorders", psorders);
        params.put("P_Team", pteam);
        params.put("P_Usrid", pusrid);
        params.put("P_Fabformat", pfabformat);
        params.put("P_Purpose", ppurpose);
        params.put("P_Quantity", pquantity);
        params.put("P_Uom", puom);
        params.put("p_lcnstrcod", plcnstrcod);

        return procedureExecutor.executeNamedProcedure("ProcSr741pk0RequestSwatch", params, ProcSr741pk0requestSwatchResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeProcKn1620pk0_ccfmatchAddCCF(String pprgid, String pusrid, String psintfabcertno, String pmintfabcertno, String pdintfabcertno, String pmatchcat) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("p_prgid", pprgid);
        params.put("p_usrid", pusrid);
        params.put("p_sintfabcertno", psintfabcertno);
        params.put("p_mintfabcertno", pmintfabcertno);
        params.put("p_dintfabcertno", pdintfabcertno);
        params.put("p_matchcat", pmatchcat);

        return procedureExecutor.executeNamedProcedure("ProcKn1620pk0_ccfmatchAddCCF", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetYrnffcodResponse executeGetYrnffcod() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getYrnffcod", params, GetYrnffcodResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1610pk0ExcccfGetOrderStsResponse executeProcKn1610pk0_excccfGetOrderSts(String pprgid, String pordnum, Integer pfabseq) {
        Map<String, Object> params = new HashMap<>(8);

        params.put("p_prgid", pprgid);
        params.put("p_ordnum", pordnum);
        params.put("p_fabseq", pfabseq);

        return procedureExecutor.executeNamedProcedure("ProcKn1610pk0_excccfGetOrderSts", params, ProcKn1610pk0ExcccfGetOrderStsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1620pk0CcfmqryQryCcfResponse executeProcKn1620pk0_ccfmqryQryCCF(String pprgid, String pusrid, String pqrytype, String psintfabcertno, String psordnum, Integer psfabseq, String pmintfabcertno, String pmordnum, Integer pmfabseq, String pmatchcat) {
        Map<String, Object> params = new HashMap<>(11);

        params.put("p_prgid", pprgid);
        params.put("p_usrid", pusrid);
        params.put("p_qrytype", pqrytype);
        params.put("p_sintfabcertno", psintfabcertno);
        params.put("p_sordnum", psordnum);
        params.put("p_sfabseq", psfabseq);
        params.put("p_mintfabcertno", pmintfabcertno);
        params.put("p_mordnum", pmordnum);
        params.put("p_mfabseq", pmfabseq);
        params.put("p_matchcat", pmatchcat);

        return procedureExecutor.executeNamedProcedure("ProcKn1620pk0_ccfmqryQryCCF", params, ProcKn1620pk0CcfmqryQryCcfResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1610pk0ExcccfGetCcflistResponse executeProcKn1610pk0_excccfGetCCFList(String pprgid, String pusrid, String pintfabcertno, String pfabcertsts, Date pstsfromdat, Date pststodat, String pfabtyp, Integer pmchgau, Integer pfabwgt, String pfabcps, String pfabdevno, Date pfabdevnoReqdatfrom, Date pfabdevnoReqdatto, String pordnum, String ptemplateseq) {
        Map<String, Object> params = new HashMap<>(16);

        params.put("p_prgid", pprgid);
        params.put("p_usrid", pusrid);
        params.put("p_intfabcertno", pintfabcertno);
        params.put("p_fabcertsts", pfabcertsts);
        params.put("p_stsfromdat", pstsfromdat);
        params.put("p_ststodat", pststodat);
        params.put("p_fabtyp", pfabtyp);
        params.put("p_mchgau", pmchgau);
        params.put("p_fabwgt", pfabwgt);
        params.put("p_fabcps", pfabcps);
        params.put("p_fabdevno", pfabdevno);
        params.put("p_fabdevno_reqdatfrom", pfabdevnoReqdatfrom);
        params.put("p_fabdevno_reqdatto", pfabdevnoReqdatto);
        params.put("pordnum", pordnum);
        params.put("p_templateseq", ptemplateseq);

        return procedureExecutor.executeNamedProcedure("ProcKn1610pk0_excccfGetCCFList", params, ProcKn1610pk0ExcccfGetCcflistResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1610pk0ExccfUpdRelMatrixResponse executeProcKn1610pk0_exccfUpdRelMatrix(String pprgid, String pusrid, String pccfno, String pordFabList) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pUsrid", pusrid);
        params.put("pCCFNo", pccfno);
        params.put("pOrdFabList", pordFabList);

        return procedureExecutor.executeNamedProcedure("ProcKn1610pk0_exccfUpdRelMatrix", params, ProcKn1610pk0ExccfUpdRelMatrixResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcFindMatchYrnStockClrResponse executeProcFindMatchYrnStockClr(String pyrncnt, String pcompo, String pyrnCdes, String pyrnQual, String pyrnYrnQualSubA, String pyrnYrnQualSubB, String pyrnffcod, String pyrnLabref, String pyrnlot, String panyColor, Double plabL, Double plabA, Double plabB, Double ptoleranceDeltaE) {
        Map<String, Object> params = new HashMap<>(15);

        params.put("pYrncnt", pyrncnt);
        params.put("pCompo", pcompo);
        params.put("pYrnCdes", pyrnCdes);
        params.put("pYrnQual", pyrnQual);
        params.put("pYrnYrnQualSubA", pyrnYrnQualSubA);
        params.put("pYrnYrnQualSubB", pyrnYrnQualSubB);
        params.put("pYrnffcod", pyrnffcod);
        params.put("pYrnLabref", pyrnLabref);
        params.put("pYrnlot", pyrnlot);
        params.put("pAnyColor", panyColor);
        params.put("plabL", plabL);
        params.put("plabA", plabA);
        params.put("plabB", plabB);
        params.put("pToleranceDeltaE", ptoleranceDeltaE);

        return procedureExecutor.executeNamedProcedure("ProcFindMatchYrnStockClr", params, ProcFindMatchYrnStockClrResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1610pk0ExcccfGetRelatedMatrixResponse executeProcKn1610pk0_excccfGetRelatedMatrix(String pprgid, String pusrid, String pordnum, Integer pfabseq, Date prelDateFrom, Date prelDateTo, String pfilterOpt, String pintFabcertno, String ptemplateseq) {
        Map<String, Object> params = new HashMap<>(11);

        params.put("pPrgid", pprgid);
        params.put("pUsrid", pusrid);
        params.put("pOrdnum", pordnum);
        params.put("pFabseq", pfabseq);
        params.put("pRelDateFrom", prelDateFrom);
        params.put("pRelDateTo", prelDateTo);
        params.put("pFilterOpt", pfilterOpt);
        params.put("pIntFabcertno", pintFabcertno);
        params.put("pTemplateseq", ptemplateseq);

        return procedureExecutor.executeNamedProcedure("ProcKn1610pk0_excccfGetRelatedMatrix", params, ProcKn1610pk0ExcccfGetRelatedMatrixResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetOutsideResponse executeGetOutside() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getOutside", params, GetOutsideResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetYrnsubqltybResponse executeGetYrnsubqltyb(String pyrnqlty) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("p_yrnqlty", pyrnqlty);

        return procedureExecutor.executeNamedProcedure("getYrnsubqltyb", params, GetYrnsubqltybResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcTt130pk0FabdevlibGetOrderDetailsResponse executeProcTT130pk0_fabdevlibGetOrderDetails(String pordnum, Integer pfabseq, String pintfabcertno) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("p_ordnum", pordnum);
        params.put("p_fabseq", pfabseq);
        params.put("p_intfabcertno", pintfabcertno);

        return procedureExecutor.executeNamedProcedure("ProcTT130pk0_fabdevlibGetOrderDetails", params, ProcTt130pk0FabdevlibGetOrderDetailsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public SprocMatchFabricClrResponse executeSprocMatchFabricClr(String pstore, String pordnum, String pclicod, String pfabtyp, String pfabsubcat, String pskuno, Integer pfabwgtFrom, Integer pfabwgtTo, Integer pbsffabwgtfrom, Integer pbsffabwgtto, Integer pfabwid, String pinside, String poutside, String pcalstn, String pclrref, String pstr, String pstripeId, String ptheme, String penzyme, String pteflon, String pldecoroute, String pfabdcodelist, String pdccode, Integer pmchgaufrom, Integer pmchgauto, String pyrncnt, String pyrncps, String pyrnclr, String poriclr, String pyrnqlty, String pyrnsubqltya, String pyrnsubqltyb, String pyrnffcod, String pyrnClrref, String pcpsField, String pcpstypA, Integer pcpstypAfrom, Integer pcpstypAto, String pcpstypB, Integer pcpstypBfrom, Integer pcpstypBto, String pcpstypC, Integer pcpstypCfrom, Integer pcpstypCto, String psearchColour, Double plabL, Double plabA, Double plabB, Double ptoleranceDeltaE, String puser, String pintfabcertno, String pccfmatchcat, String pwarehouse, String ppatternCode) {
        Map<String, Object> params = new HashMap<>(55);

        params.put("pStore", pstore);
        params.put("pOrdnum", pordnum);
        params.put("pClicod", pclicod);
        params.put("pFabtyp", pfabtyp);
        params.put("pFabsubcat", pfabsubcat);
        params.put("pSkuno", pskuno);
        params.put("pFabwgtFrom", pfabwgtFrom);
        params.put("pFabwgtTo", pfabwgtTo);
        params.put("pBsffabwgtfrom", pbsffabwgtfrom);
        params.put("pBsffabwgtto", pbsffabwgtto);
        params.put("pFabwid", pfabwid);
        params.put("pInside", pinside);
        params.put("pOutside", poutside);
        params.put("pCalstn", pcalstn);
        params.put("pClrref", pclrref);
        params.put("pStr", pstr);
        params.put("pStripeId", pstripeId);
        params.put("pTheme", ptheme);
        params.put("pEnzyme", penzyme);
        params.put("pTeflon", pteflon);
        params.put("pLdecoroute", pldecoroute);
        params.put("pFabdcodelist", pfabdcodelist);
        params.put("pDccode", pdccode);
        params.put("pMchgaufrom", pmchgaufrom);
        params.put("pMchgauto", pmchgauto);
        params.put("pYrncnt", pyrncnt);
        params.put("pYrncps", pyrncps);
        params.put("pYrnclr", pyrnclr);
        params.put("pOriclr", poriclr);
        params.put("pYrnqlty", pyrnqlty);
        params.put("pYrnsubqltya", pyrnsubqltya);
        params.put("pYrnsubqltyb", pyrnsubqltyb);
        params.put("pYrnffcod", pyrnffcod);
        params.put("pYrnClrref", pyrnClrref);
        params.put("pcpsField", pcpsField);
        params.put("pcpstypA", pcpstypA);
        params.put("pcpstypAFrom", pcpstypAfrom);
        params.put("pcpstypATo", pcpstypAto);
        params.put("pcpstypB", pcpstypB);
        params.put("pcpstypBFrom", pcpstypBfrom);
        params.put("pcpstypBTo", pcpstypBto);
        params.put("pcpstypC", pcpstypC);
        params.put("pcpstypCFrom", pcpstypCfrom);
        params.put("pcpstypCTo", pcpstypCto);
        params.put("pSearchColour", psearchColour);
        params.put("plabL", plabL);
        params.put("plabA", plabA);
        params.put("plabB", plabB);
        params.put("pToleranceDeltaE", ptoleranceDeltaE);
        params.put("pUser", puser);
        params.put("pIntfabcertno", pintfabcertno);
        params.put("pCCFMatchcat", pccfmatchcat);
        params.put("pWarehouse", pwarehouse);
        params.put("pPatternCode", ppatternCode);

        return procedureExecutor.executeNamedProcedure("SprocMatchFabricClr", params, SprocMatchFabricClrResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetYrnsubqltyaResponse executeGetYrnsubqltya(String pyrnqlty) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("p_yrnqlty", pyrnqlty);

        return procedureExecutor.executeNamedProcedure("getYrnsubqltya", params, GetYrnsubqltyaResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetYrnsubqltycResponse executeGetYrnsubqltyc(String pyrnqlty) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("p_yrnqlty", pyrnqlty);

        return procedureExecutor.executeNamedProcedure("getYrnsubqltyc", params, GetYrnsubqltycResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Void executeUpdateTT130PK0_FABDEVLIB_request_FabSrcMail(UpdateTt130pk0FabdevlibRequestFabSrcMailRequest updateTt130pk0fabdevlibRequestFabSrcMailRequest) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("pStrFrmWM", updateTt130pk0fabdevlibRequestFabSrcMailRequest.getPstrFrmWm());
        params.put("pYarnFilter", updateTt130pk0fabdevlibRequestFabSrcMailRequest.getPyarnFilter());
        params.put("pRemakrs", updateTt130pk0fabdevlibRequestFabSrcMailRequest.getPremakrs());
        params.put("pClient", updateTt130pk0fabdevlibRequestFabSrcMailRequest.getPclient());

        return procedureExecutor.executeNamedProcedure("updateTT130PK0_FABDEVLIB_request_FabSrcMail", params, Void.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1610pk0ExcccfGetFablibKdsResponse executeProcKn1610pk0_excccfGetFablibKds(String pprgid, String pusrid, String pordnum, Integer pfabseq) {
        Map<String, Object> params = new HashMap<>(5);

        params.put("pPrgid", pprgid);
        params.put("pUsrid", pusrid);
        params.put("pOrdnum", pordnum);
        params.put("pFabseq", pfabseq);

        return procedureExecutor.executeNamedProcedure("ProcKn1610pk0_excccfGetFablibKds", params, ProcKn1610pk0ExcccfGetFablibKdsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf2000pk0OrlovGetCliGrpResponse executeProcRf2000pk0_OrlovGetCliGrp(String pusrid, String pprgid) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("p_Usrid", pusrid);
        params.put("p_Prgid", pprgid);

        return procedureExecutor.executeNamedProcedure("ProcRf2000pk0_OrlovGetCliGrp", params, ProcRf2000pk0OrlovGetCliGrpResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1610pk0ExcccfAssociateOrderResponse executeProcKn1610pk0_excccfAssociateOrder(String pprgid, String pusrid, String pordnum, Integer pfabseq, String pccfno) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("pPrgid", pprgid);
        params.put("pUsrid", pusrid);
        params.put("pOrdnum", pordnum);
        params.put("pFabseq", pfabseq);
        params.put("pCCFno", pccfno);

        return procedureExecutor.executeNamedProcedure("ProcKn1610pk0_excccfAssociateOrder", params, ProcKn1610pk0ExcccfAssociateOrderResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1610pk0ExcccfGetCcffabDiffResponse executeProcKn1610pk0_excccfGetCCFFabDiff(String pprgid, String pusrid, String pintfabcertno2, String pordnum, Integer pfabseq) {
        Map<String, Object> params = new HashMap<>(6);

        params.put("pPrgid", pprgid);
        params.put("pUsrid", pusrid);
        params.put("pIntfabcertno2", pintfabcertno2);
        params.put("pOrdnum", pordnum);
        params.put("pFabseq", pfabseq);

        return procedureExecutor.executeNamedProcedure("ProcKn1610pk0_excccfGetCCFFabDiff", params, ProcKn1610pk0ExcccfGetCcffabDiffResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf020pk0getClrOptResponse executeProcRf020pk0GetClrOpt(String pclroption, String pfilter) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("p_clroption", pclroption);
        params.put("p_filter", pfilter);

        return procedureExecutor.executeNamedProcedure("ProcRf020pk0GetClrOpt", params, ProcRf020pk0getClrOptResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcTt130pk0FabdevlibGetYrnCpsResponse executeProcTt130pk0_fabdevlibGetYrnCps() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("ProcTt130pk0_fabdevlibGetYrnCps", params, ProcTt130pk0FabdevlibGetYrnCpsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetFabdevreqdetResponse executeGetFabdevreqdet(String pfabdevno) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("p_fabdevno", pfabdevno);

        return procedureExecutor.executeNamedProcedure("getFabdevreqdet", params, GetFabdevreqdetResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public UpdFabdevnoResponse executeUpdFabdevno(String pfabAssessno, String pfabdevno, String pordnum, Integer pfabseq, String pfabbaseno, String pfabsearchsrc, String pprgid, String pusrid) {
        Map<String, Object> params = new HashMap<>(10);

        params.put("p_fabAssessno", pfabAssessno);
        params.put("p_fabdevno", pfabdevno);
        params.put("p_ordnum", pordnum);
        params.put("p_fabseq", pfabseq);
        params.put("p_fabbaseno", pfabbaseno);
        params.put("p_fabsearchsrc", pfabsearchsrc);
        params.put("p_prgid", pprgid);
        params.put("p_usrid", pusrid);

        return procedureExecutor.executeNamedProcedure("updFabdevno", params, UpdFabdevnoResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcTt130pk0FabdevlibGetFabFilterOptResponse executeProcTt130pk0_fabdevlibGetFabFilterOpt() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("ProcTt130pk0_fabdevlibGetFabFilterOpt", params, ProcTt130pk0FabdevlibGetFabFilterOptResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetYrncdesResponse executeGetYrncdes(String pyrnclr, String pyrncnt) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("p_yrnclr", pyrnclr);
        params.put("p_yrncnt", pyrncnt);

        return procedureExecutor.executeNamedProcedure("getYrncdes", params, GetYrncdesResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf020pk0QryClrsCompareDeltaEResponse executeProcRf020pk0_QryClrsCompareDeltaE(Double plabL1, Double plabA1, Double plabB1, Double plabL2, Double plabA2, Double plabB2) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("pLabL1", plabL1);
        params.put("pLabA1", plabA1);
        params.put("pLabB1", plabB1);
        params.put("pLabL2", plabL2);
        params.put("plabA2", plabA2);
        params.put("pLabB2", plabB2);

        return procedureExecutor.executeNamedProcedure("ProcRf020pk0_QryClrsCompareDeltaE", params, ProcRf020pk0QryClrsCompareDeltaEResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public InputStream executeProcSr741pk0SprocGetFabImages(String pordnum, Integer pfabseq) {
        Map<String, Object> params = new HashMap<>(3);

        params.put("p_ordnum", pordnum);
        params.put("p_fabseq", pfabseq);

        ProcSr741pk0sprocGetFabImagesResponse _result =  procedureExecutor.executeNamedProcedure("ProcSr741pk0SprocGetFabImages", params, ProcSr741pk0sprocGetFabImagesResponse.class);
        if(_result.getPfabimage() == null) {
            LOGGER.debug("Blob content not exists for pfabimage in procedure ProcSr741pk0SprocGetFabImages");
            throw new BlobContentNotFoundException("Blob content not found for pfabimage in procedure ProcSr741pk0SprocGetFabImages");
        }
        return new ByteArrayInputStream(_result.getPfabimage());
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf020pk0UpdClrsAddPantoneResponse executeProcRf020pk0_UpdClrsAddPantone(String pprgid, String puserid, String ppantone, String ppantoneCat, Double plabL, Double plabA, Double plabB, Double prgbR, Double prgbG, Double prgbB, String phexval, String poption) {
        Map<String, Object> params = new HashMap<>(13);

        params.put("p_prgid", pprgid);
        params.put("p_userid", puserid);
        params.put("p_pantone", ppantone);
        params.put("p_pantoneCat", ppantoneCat);
        params.put("p_labL", plabL);
        params.put("p_labA", plabA);
        params.put("p_labB", plabB);
        params.put("p_rgbR", prgbR);
        params.put("p_rgbG", prgbG);
        params.put("p_rgbB", prgbB);
        params.put("p_hexval", phexval);
        params.put("p_option", poption);

        return procedureExecutor.executeNamedProcedure("ProcRf020pk0_UpdClrsAddPantone", params, ProcRf020pk0UpdClrsAddPantoneResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetYrncpstypResponse executeGetYrncpstyp() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getYrncpstyp", params, GetYrncpstypResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetSpFinishResponse executeGetSpFinish() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getSpFinish", params, GetSpFinishResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetFabtypResponse executeGetFabtyp() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getFabtyp", params, GetFabtypResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcRf020pk0QryclrsGetColoursResponse executeProcRf020pk0_qryclrsGetColours(Double plabL, Double plabA, Double plabB, Double ptoleranceDeltaE, String psearchOpt, String plabref, String pvalue) {
        Map<String, Object> params = new HashMap<>(8);

        params.put("p_labL", plabL);
        params.put("p_labA", plabA);
        params.put("p_labB", plabB);
        params.put("p_ToleranceDeltaE", ptoleranceDeltaE);
        params.put("p_search_opt", psearchOpt);
        params.put("p_labref", plabref);
        params.put("p_value", pvalue);

        return procedureExecutor.executeNamedProcedure("ProcRf020pk0_qryclrsGetColours", params, ProcRf020pk0QryclrsGetColoursResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetStrResponse executeGetStr() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getStr", params, GetStrResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetInsideResponse executeGetInside() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getInside", params, GetInsideResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetYrnqltyResponse executeGetYrnqlty() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getYrnqlty", params, GetYrnqltyResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetProcTt130pk0FabdevlibClicodResponse executeGetProcTT130PK0_FABDEVLIB_Clicod(String pprgid) {
        Map<String, Object> params = new HashMap<>(2);

        params.put("pPrgid", pprgid);

        return procedureExecutor.executeNamedProcedure("getProcTT130PK0_FABDEVLIB_Clicod", params, GetProcTt130pk0FabdevlibClicodResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetMatchingFabsResponse executeGetMatchingFabs(String pusrid, String pprgid, String pfabFilterOption, String pfabtyp, String pinside, String poutside, String penzyme, String pspfinish, String pstr, String pstripeid, String pdccode, String pldecoroute, String pyarnList, String pyrncnt, String pyrncps, String pyrnclr, String poriclr, String pyrnqlty, String pyrnsubqltya, String pyrnsubqltyb, String pyrnffcod, String pyrnClrref, Integer pfabwgtfrom, Integer pfabwgtto, Integer pbsffabwgtfrom, Integer pbsffabwgtto, Integer pmchgaufrom, Integer pmchgauto, String pcpsField, String pcpstypA, Integer pcpstypAfrom, Integer pcpstypAto, String pcpstypB, Integer pcpstypBfrom, Integer pcpstypBto, String pcpstypC, Integer pcpstypCfrom, Integer pcpstypCto, String pfabdevno, String pordnum, String pfabsubcatdes, String pskuno, String pfabdcodelist, String pcalstn, String pintfabcertno, String porderwithHanger, String pcligrp, String ptemplateSeq) {
        Map<String, Object> params = new HashMap<>(50);

        params.put("pUsrid", pusrid);
        params.put("pPrgid", pprgid);
        params.put("pFabFilterOption", pfabFilterOption);
        params.put("pFabtyp", pfabtyp);
        params.put("pInside", pinside);
        params.put("pOutside", poutside);
        params.put("pEnzyme", penzyme);
        params.put("pSpfinish", pspfinish);
        params.put("pStr", pstr);
        params.put("pStripeid", pstripeid);
        params.put("pDccode", pdccode);
        params.put("pLDecoroute", pldecoroute);
        params.put("pYarnList", pyarnList);
        params.put("pYrncnt", pyrncnt);
        params.put("pYrncps", pyrncps);
        params.put("pYrnclr", pyrnclr);
        params.put("pOriclr", poriclr);
        params.put("pYrnqlty", pyrnqlty);
        params.put("pYrnsubqltya", pyrnsubqltya);
        params.put("pYrnsubqltyb", pyrnsubqltyb);
        params.put("pYrnffcod", pyrnffcod);
        params.put("pYrnClrref", pyrnClrref);
        params.put("pFabwgtfrom", pfabwgtfrom);
        params.put("pFabwgtto", pfabwgtto);
        params.put("pBsffabwgtfrom", pbsffabwgtfrom);
        params.put("pBsffabwgtto", pbsffabwgtto);
        params.put("pMchgaufrom", pmchgaufrom);
        params.put("pMchgauto", pmchgauto);
        params.put("pcpsField", pcpsField);
        params.put("pcpstypA", pcpstypA);
        params.put("pcpstypAFrom", pcpstypAfrom);
        params.put("pcpstypATo", pcpstypAto);
        params.put("pcpstypB", pcpstypB);
        params.put("pcpstypBFrom", pcpstypBfrom);
        params.put("pcpstypBTo", pcpstypBto);
        params.put("pcpstypC", pcpstypC);
        params.put("pcpstypCFrom", pcpstypCfrom);
        params.put("pcpstypCTo", pcpstypCto);
        params.put("p_fabdevno", pfabdevno);
        params.put("pOrdnum", pordnum);
        params.put("pfabsubcatdes", pfabsubcatdes);
        params.put("pSkuno", pskuno);
        params.put("pFabdcodelist", pfabdcodelist);
        params.put("pCalstn", pcalstn);
        params.put("pIntfabcertno", pintfabcertno);
        params.put("pOrderwithHanger", porderwithHanger);
        params.put("pCligrp", pcligrp);
        params.put("pTemplateSeq", ptemplateSeq);

        return procedureExecutor.executeNamedProcedure("getMatchingFabs", params, GetMatchingFabsResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetLdecorouteResponse executeGetLdecoroute() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getLdecoroute", params, GetLdecorouteResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1610pk0ExcccfProcExcpCertifyFabResponse executeProcKn1610pk0_excccfProcExcpCertifyFab(String pprgid, String pusrid, String pordnum, Integer pfabseq, String pnewsts, String pnewremarks) {
        Map<String, Object> params = new HashMap<>(7);

        params.put("p_prgid", pprgid);
        params.put("p_usrid", pusrid);
        params.put("p_ordnum", pordnum);
        params.put("p_fabseq", pfabseq);
        params.put("p_newsts", pnewsts);
        params.put("p_newremarks", pnewremarks);

        return procedureExecutor.executeNamedProcedure("ProcKn1610pk0_excccfProcExcpCertifyFab", params, ProcKn1610pk0ExcccfProcExcpCertifyFabResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public ProcKn1620pk0ccfmQryGetMatchDetResponse executeProcKn1620pk0CcfmQryGetMatchDet(String psintfabcertno, String pdintfabcertno, String pccffilter) {
        Map<String, Object> params = new HashMap<>(4);

        params.put("p_sintfabcertno", psintfabcertno);
        params.put("p_dintfabcertno", pdintfabcertno);
        params.put("p_ccffilter", pccffilter);

        return procedureExecutor.executeNamedProcedure("ProcKn1620pk0CcfmQryGetMatchDet", params, ProcKn1620pk0ccfmQryGetMatchDetResponse.class);
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public GetDccodeResponse executeGetDccode() {
        Map<String, Object> params = new HashMap<>(1);


        return procedureExecutor.executeNamedProcedure("getDccode", params, GetDccodeResponse.class);
    }

}