/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.InputStream;
import java.sql.Date;
import java.util.Collections;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbProcedureExecutorService;
import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@RestController(value = "Pfsdb.ProcedureExecutionController")
@RequestMapping("/pfsdb/procedureExecutor")
@Api(value = "ProcedureExecutionController", description = "controller class for procedure execution")
public class ProcedureExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProcedureExecutionController.class);

    @Autowired
    private PfsdbProcedureExecutorService procedureService;

    @RequestMapping(value = "/procedure/execute/ProcKn1610pk0_updccfUpdRem", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcKn1610pk0_updccfUpdRem")
    public Void executeProcKn1610pk0_updccfUpdRem(@RequestParam(value = "p_prgid", required = false) String pprgid, @RequestParam(value = "p_usrid", required = false) String pusrid, @RequestParam(value = "p_fabdevno", required = false) String pfabdevno, @RequestParam(value = "p_fabitemseq", required = false) Integer pfabitemseq, @RequestParam(value = "p_ccfremarks", required = false) String pccfremarks, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1610pk0_updccfUpdRem");
        Void _result = procedureService.executeProcKn1610pk0_updccfUpdRem(pprgid, pusrid, pfabdevno, pfabitemseq, pccfremarks);
        LOGGER.debug("got the result for named procedure: ProcKn1610pk0_updccfUpdRem, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getEnzyme", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of enzymes")
    public List<GetEnzymeResponse> executeGetEnzyme(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getEnzyme");
        GetEnzymeResponse _result = procedureService.executeGetEnzyme();
        LOGGER.debug("got the result for v1 named procedure: getEnzyme, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getYrnclr", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of Yarn colours")
    public List<GetYrnclrResponse> executeGetYrnclr(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getYrnclr");
        GetYrnclrResponse _result = procedureService.executeGetYrnclr();
        LOGGER.debug("got the result for v1 named procedure: getYrnclr, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getYrncnt", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of yarn counts")
    public List<GetYrncntResponse> executeGetYrncnt(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getYrncnt");
        GetYrncntResponse _result = procedureService.executeGetYrncnt();
        LOGGER.debug("got the result for v1 named procedure: getYrncnt, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/ProcSr741pk0RequestSwatch", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Request multiple swatch")
    public ProcSr741pk0requestSwatchResponse executeProcSr741pk0RequestSwatch(@RequestParam(value = "P_Sorders", required = false) String psorders, @RequestParam(value = "P_Team", required = false) String pteam, @RequestParam(value = "P_Usrid", required = false) String pusrid, @RequestParam(value = "P_Fabformat", required = false) String pfabformat, @RequestParam(value = "P_Purpose", required = false) String ppurpose, @RequestParam(value = "P_Quantity", required = false) Double pquantity, @RequestParam(value = "P_Uom", required = false) String puom, @RequestParam(value = "p_lcnstrcod", required = false) String plcnstrcod, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcSr741pk0RequestSwatch");
        ProcSr741pk0requestSwatchResponse _result = procedureService.executeProcSr741pk0RequestSwatch(psorders, pteam, pusrid, pfabformat, ppurpose, pquantity, puom, plcnstrcod);
        LOGGER.debug("got the result for named procedure: ProcSr741pk0RequestSwatch, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1620pk0_ccfmatchAddCCF", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcKn1620pk0_ccfmatchAddCCF")
    public Void executeProcKn1620pk0_ccfmatchAddCCF(@RequestParam(value = "p_prgid", required = false) String pprgid, @RequestParam(value = "p_usrid", required = false) String pusrid, @RequestParam(value = "p_sintfabcertno", required = false) String psintfabcertno, @RequestParam(value = "p_mintfabcertno", required = false) String pmintfabcertno, @RequestParam(value = "p_dintfabcertno", required = false) String pdintfabcertno, @RequestParam(value = "p_matchcat", required = false) String pmatchcat, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1620pk0_ccfmatchAddCCF");
        Void _result = procedureService.executeProcKn1620pk0_ccfmatchAddCCF(pprgid, pusrid, psintfabcertno, pmintfabcertno, pdintfabcertno, pmatchcat);
        LOGGER.debug("got the result for named procedure: ProcKn1620pk0_ccfmatchAddCCF, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getYrnffcod", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get FFcode")
    public List<GetYrnffcodResponse> executeGetYrnffcod(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getYrnffcod");
        GetYrnffcodResponse _result = procedureService.executeGetYrnffcod();
        LOGGER.debug("got the result for v1 named procedure: getYrnffcod, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1610pk0_excccfGetOrderSts", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Status for orders")
    public ProcKn1610pk0ExcccfGetOrderStsResponse executeProcKn1610pk0_excccfGetOrderSts(@RequestParam(value = "p_prgid", required = false) String pprgid, @RequestParam(value = "p_ordnum", required = false) String pordnum, @RequestParam(value = "p_fabseq", required = false) Integer pfabseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1610pk0_excccfGetOrderSts");
        ProcKn1610pk0ExcccfGetOrderStsResponse _result = procedureService.executeProcKn1610pk0_excccfGetOrderSts(pprgid, pordnum, pfabseq);
        LOGGER.debug("got the result for named procedure: ProcKn1610pk0_excccfGetOrderSts, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1620pk0_ccfmqryQryCCF", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcKn1620pk0_ccfmqryQryCCF")
    public ProcKn1620pk0CcfmqryQryCcfResponse executeProcKn1620pk0_ccfmqryQryCCF(@RequestParam(value = "p_prgid", required = false) String pprgid, @RequestParam(value = "p_usrid", required = false) String pusrid, @RequestParam(value = "p_qrytype", required = false) String pqrytype, @RequestParam(value = "p_sintfabcertno", required = false) String psintfabcertno, @RequestParam(value = "p_sordnum", required = false) String psordnum, @RequestParam(value = "p_sfabseq", required = false) Integer psfabseq, @RequestParam(value = "p_mintfabcertno", required = false) String pmintfabcertno, @RequestParam(value = "p_mordnum", required = false) String pmordnum, @RequestParam(value = "p_mfabseq", required = false) Integer pmfabseq, @RequestParam(value = "p_matchcat", required = false) String pmatchcat, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1620pk0_ccfmqryQryCCF");
        ProcKn1620pk0CcfmqryQryCcfResponse _result = procedureService.executeProcKn1620pk0_ccfmqryQryCCF(pprgid, pusrid, pqrytype, psintfabcertno, psordnum, psfabseq, pmintfabcertno, pmordnum, pmfabseq, pmatchcat);
        LOGGER.debug("got the result for named procedure: ProcKn1620pk0_ccfmqryQryCCF, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1610pk0_excccfGetCCFList", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Return the ccf list after filter")
    public ProcKn1610pk0ExcccfGetCcflistResponse executeProcKn1610pk0_excccfGetCCFList(@RequestParam(value = "p_prgid", required = false) String pprgid, @RequestParam(value = "p_usrid", required = false) String pusrid, @RequestParam(value = "p_intfabcertno", required = false) String pintfabcertno, @RequestParam(value = "p_fabcertsts", required = false) String pfabcertsts, @RequestParam(value = "p_stsfromdat", required = false) Date pstsfromdat, @RequestParam(value = "p_ststodat", required = false) Date pststodat, @RequestParam(value = "p_fabtyp", required = false) String pfabtyp, @RequestParam(value = "p_mchgau", required = false) Integer pmchgau, @RequestParam(value = "p_fabwgt", required = false) Integer pfabwgt, @RequestParam(value = "p_fabcps", required = false) String pfabcps, @RequestParam(value = "p_fabdevno", required = false) String pfabdevno, @RequestParam(value = "p_fabdevno_reqdatfrom", required = false) Date pfabdevnoReqdatfrom, @RequestParam(value = "p_fabdevno_reqdatto", required = false) Date pfabdevnoReqdatto, @RequestParam(value = "pordnum", required = false) String pordnum, @RequestParam(value = "p_templateseq", required = false) String ptemplateseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1610pk0_excccfGetCCFList");
        ProcKn1610pk0ExcccfGetCcflistResponse _result = procedureService.executeProcKn1610pk0_excccfGetCCFList(pprgid, pusrid, pintfabcertno, pfabcertsts, pstsfromdat, pststodat, pfabtyp, pmchgau, pfabwgt, pfabcps, pfabdevno, pfabdevnoReqdatfrom, pfabdevnoReqdatto, pordnum, ptemplateseq);
        LOGGER.debug("got the result for named procedure: ProcKn1610pk0_excccfGetCCFList, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1610pk0_exccfUpdRelMatrix", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcKn1610pk0_exccfUpdRelMatrix - update related matrix for a list of orders or only 1 order")
    public ProcKn1610pk0ExccfUpdRelMatrixResponse executeProcKn1610pk0_exccfUpdRelMatrix(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pUsrid", required = false) String pusrid, @RequestParam(value = "pCCFNo", required = false) String pccfno, @RequestParam(value = "pOrdFabList", required = false) String pordFabList, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1610pk0_exccfUpdRelMatrix");
        ProcKn1610pk0ExccfUpdRelMatrixResponse _result = procedureService.executeProcKn1610pk0_exccfUpdRelMatrix(pprgid, pusrid, pccfno, pordFabList);
        LOGGER.debug("got the result for named procedure: ProcKn1610pk0_exccfUpdRelMatrix, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcFindMatchYrnStockClr", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcFindMatchYrnStockClr")
    public ProcFindMatchYrnStockClrResponse executeProcFindMatchYrnStockClr(@RequestParam(value = "pYrncnt", required = false) String pyrncnt, @RequestParam(value = "pCompo", required = false) String pcompo, @RequestParam(value = "pYrnCdes", required = false) String pyrnCdes, @RequestParam(value = "pYrnQual", required = false) String pyrnQual, @RequestParam(value = "pYrnYrnQualSubA", required = false) String pyrnYrnQualSubA, @RequestParam(value = "pYrnYrnQualSubB", required = false) String pyrnYrnQualSubB, @RequestParam(value = "pYrnffcod", required = false) String pyrnffcod, @RequestParam(value = "pYrnLabref", required = false) String pyrnLabref, @RequestParam(value = "pYrnlot", required = false) String pyrnlot, @RequestParam(value = "pAnyColor", required = false) String panyColor, @RequestParam(value = "plabL", required = false) Double plabL, @RequestParam(value = "plabA", required = false) Double plabA, @RequestParam(value = "plabB", required = false) Double plabB, @RequestParam(value = "pToleranceDeltaE", required = false) Double ptoleranceDeltaE, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcFindMatchYrnStockClr");
        ProcFindMatchYrnStockClrResponse _result = procedureService.executeProcFindMatchYrnStockClr(pyrncnt, pcompo, pyrnCdes, pyrnQual, pyrnYrnQualSubA, pyrnYrnQualSubB, pyrnffcod, pyrnLabref, pyrnlot, panyColor, plabL, plabA, plabB, ptoleranceDeltaE);
        LOGGER.debug("got the result for named procedure: ProcFindMatchYrnStockClr, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1610pk0_excccfGetRelatedMatrix", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Related Matrix")
    public ProcKn1610pk0ExcccfGetRelatedMatrixResponse executeProcKn1610pk0_excccfGetRelatedMatrix(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pUsrid", required = false) String pusrid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pFabseq", required = false) Integer pfabseq, @RequestParam(value = "pRelDateFrom", required = false) Date prelDateFrom, @RequestParam(value = "pRelDateTo", required = false) Date prelDateTo, @RequestParam(value = "pFilterOpt", required = false) String pfilterOpt, @RequestParam(value = "pIntFabcertno", required = false) String pintFabcertno, @RequestParam(value = "pTemplateseq", required = false) String ptemplateseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1610pk0_excccfGetRelatedMatrix");
        ProcKn1610pk0ExcccfGetRelatedMatrixResponse _result = procedureService.executeProcKn1610pk0_excccfGetRelatedMatrix(pprgid, pusrid, pordnum, pfabseq, prelDateFrom, prelDateTo, pfilterOpt, pintFabcertno, ptemplateseq);
        LOGGER.debug("got the result for named procedure: ProcKn1610pk0_excccfGetRelatedMatrix, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getOutside", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of outside")
    public List<GetOutsideResponse> executeGetOutside(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getOutside");
        GetOutsideResponse _result = procedureService.executeGetOutside();
        LOGGER.debug("got the result for v1 named procedure: getOutside, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getYrnsubqltyb", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get sub qlty B")
    public List<GetYrnsubqltybResponse> executeGetYrnsubqltyb(@RequestParam(value = "p_yrnqlty", required = false) String pyrnqlty, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getYrnsubqltyb");
        GetYrnsubqltybResponse _result = procedureService.executeGetYrnsubqltyb(pyrnqlty);
        LOGGER.debug("got the result for v1 named procedure: getYrnsubqltyb, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/ProcTT130pk0_fabdevlibGetOrderDetails", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Order Details")
    public ProcTt130pk0FabdevlibGetOrderDetailsResponse executeProcTT130pk0_fabdevlibGetOrderDetails(@RequestParam(value = "p_ordnum", required = false) String pordnum, @RequestParam(value = "p_fabseq", required = false) Integer pfabseq, @RequestParam(value = "p_intfabcertno", required = false) String pintfabcertno, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcTT130pk0_fabdevlibGetOrderDetails");
        ProcTt130pk0FabdevlibGetOrderDetailsResponse _result = procedureService.executeProcTT130pk0_fabdevlibGetOrderDetails(pordnum, pfabseq, pintfabcertno);
        LOGGER.debug("got the result for named procedure: ProcTT130pk0_fabdevlibGetOrderDetails, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/SprocMatchFabricClr", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "sr741pk0.SprocMatchFabricClr")
    public SprocMatchFabricClrResponse executeSprocMatchFabricClr(@RequestParam(value = "pStore", required = false) String pstore, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pClicod", required = false) String pclicod, @RequestParam(value = "pFabtyp", required = false) String pfabtyp, @RequestParam(value = "pFabsubcat", required = false) String pfabsubcat, @RequestParam(value = "pSkuno", required = false) String pskuno, @RequestParam(value = "pFabwgtFrom", required = false) Integer pfabwgtFrom, @RequestParam(value = "pFabwgtTo", required = false) Integer pfabwgtTo, @RequestParam(value = "pBsffabwgtfrom", required = false) Integer pbsffabwgtfrom, @RequestParam(value = "pBsffabwgtto", required = false) Integer pbsffabwgtto, @RequestParam(value = "pFabwid", required = false) Integer pfabwid, @RequestParam(value = "pInside", required = false) String pinside, @RequestParam(value = "pOutside", required = false) String poutside, @RequestParam(value = "pCalstn", required = false) String pcalstn, @RequestParam(value = "pClrref", required = false) String pclrref, @RequestParam(value = "pStr", required = false) String pstr, @RequestParam(value = "pStripeId", required = false) String pstripeId, @RequestParam(value = "pTheme", required = false) String ptheme, @RequestParam(value = "pEnzyme", required = false) String penzyme, @RequestParam(value = "pTeflon", required = false) String pteflon, @RequestParam(value = "pLdecoroute", required = false) String pldecoroute, @RequestParam(value = "pFabdcodelist", required = false) String pfabdcodelist, @RequestParam(value = "pDccode", required = false) String pdccode, @RequestParam(value = "pMchgaufrom", required = false) Integer pmchgaufrom, @RequestParam(value = "pMchgauto", required = false) Integer pmchgauto, @RequestParam(value = "pYrncnt", required = false) String pyrncnt, @RequestParam(value = "pYrncps", required = false) String pyrncps, @RequestParam(value = "pYrnclr", required = false) String pyrnclr, @RequestParam(value = "pOriclr", required = false) String poriclr, @RequestParam(value = "pYrnqlty", required = false) String pyrnqlty, @RequestParam(value = "pYrnsubqltya", required = false) String pyrnsubqltya, @RequestParam(value = "pYrnsubqltyb", required = false) String pyrnsubqltyb, @RequestParam(value = "pYrnffcod", required = false) String pyrnffcod, @RequestParam(value = "pYrnClrref", required = false) String pyrnClrref, @RequestParam(value = "pcpsField", required = false) String pcpsField, @RequestParam(value = "pcpstypA", required = false) String pcpstypA, @RequestParam(value = "pcpstypAFrom", required = false) Integer pcpstypAfrom, @RequestParam(value = "pcpstypATo", required = false) Integer pcpstypAto, @RequestParam(value = "pcpstypB", required = false) String pcpstypB, @RequestParam(value = "pcpstypBFrom", required = false) Integer pcpstypBfrom, @RequestParam(value = "pcpstypBTo", required = false) Integer pcpstypBto, @RequestParam(value = "pcpstypC", required = false) String pcpstypC, @RequestParam(value = "pcpstypCFrom", required = false) Integer pcpstypCfrom, @RequestParam(value = "pcpstypCTo", required = false) Integer pcpstypCto, @RequestParam(value = "pSearchColour", required = false) String psearchColour, @RequestParam(value = "plabL", required = false) Double plabL, @RequestParam(value = "plabA", required = false) Double plabA, @RequestParam(value = "plabB", required = false) Double plabB, @RequestParam(value = "pToleranceDeltaE", required = false) Double ptoleranceDeltaE, @RequestParam(value = "pUser", required = false) String puser, @RequestParam(value = "pIntfabcertno", required = false) String pintfabcertno, @RequestParam(value = "pCCFMatchcat", required = false) String pccfmatchcat, @RequestParam(value = "pWarehouse", required = false) String pwarehouse, @RequestParam(value = "pPatternCode", required = false) String ppatternCode, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: SprocMatchFabricClr");
        SprocMatchFabricClrResponse _result = procedureService.executeSprocMatchFabricClr(pstore, pordnum, pclicod, pfabtyp, pfabsubcat, pskuno, pfabwgtFrom, pfabwgtTo, pbsffabwgtfrom, pbsffabwgtto, pfabwid, pinside, poutside, pcalstn, pclrref, pstr, pstripeId, ptheme, penzyme, pteflon, pldecoroute, pfabdcodelist, pdccode, pmchgaufrom, pmchgauto, pyrncnt, pyrncps, pyrnclr, poriclr, pyrnqlty, pyrnsubqltya, pyrnsubqltyb, pyrnffcod, pyrnClrref, pcpsField, pcpstypA, pcpstypAfrom, pcpstypAto, pcpstypB, pcpstypBfrom, pcpstypBto, pcpstypC, pcpstypCfrom, pcpstypCto, psearchColour, plabL, plabA, plabB, ptoleranceDeltaE, puser, pintfabcertno, pccfmatchcat, pwarehouse, ppatternCode);
        LOGGER.debug("got the result for named procedure: SprocMatchFabricClr, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getYrnsubqltya", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get yarn sub qlty A")
    public List<GetYrnsubqltyaResponse> executeGetYrnsubqltya(@RequestParam(value = "p_yrnqlty", required = false) String pyrnqlty, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getYrnsubqltya");
        GetYrnsubqltyaResponse _result = procedureService.executeGetYrnsubqltya(pyrnqlty);
        LOGGER.debug("got the result for v1 named procedure: getYrnsubqltya, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getYrnsubqltyc", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "sub qlty C")
    public List<GetYrnsubqltycResponse> executeGetYrnsubqltyc(@RequestParam(value = "p_yrnqlty", required = false) String pyrnqlty, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getYrnsubqltyc");
        GetYrnsubqltycResponse _result = procedureService.executeGetYrnsubqltyc(pyrnqlty);
        LOGGER.debug("got the result for v1 named procedure: getYrnsubqltyc, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/updateTT130PK0_FABDEVLIB_request_FabSrcMail", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Send a mail containing the filters")
    public Void executeUpdateTT130PK0_FABDEVLIB_request_FabSrcMail(@Valid @RequestBody UpdateTt130pk0FabdevlibRequestFabSrcMailRequest updateTt130pk0fabdevlibRequestFabSrcMailRequest, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: updateTT130PK0_FABDEVLIB_request_FabSrcMail");
        Void _result = procedureService.executeUpdateTT130PK0_FABDEVLIB_request_FabSrcMail(updateTt130pk0fabdevlibRequestFabSrcMailRequest);
        LOGGER.debug("got the result for named procedure: updateTT130PK0_FABDEVLIB_request_FabSrcMail, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1610pk0_excccfGetFablibKds", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Compare kds to fablib")
    public ProcKn1610pk0ExcccfGetFablibKdsResponse executeProcKn1610pk0_excccfGetFablibKds(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pUsrid", required = false) String pusrid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pFabseq", required = false) Integer pfabseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1610pk0_excccfGetFablibKds");
        ProcKn1610pk0ExcccfGetFablibKdsResponse _result = procedureService.executeProcKn1610pk0_excccfGetFablibKds(pprgid, pusrid, pordnum, pfabseq);
        LOGGER.debug("got the result for named procedure: ProcKn1610pk0_excccfGetFablibKds, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRf2000pk0_OrlovGetCliGrp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcRf2000pk0_OrlovGetCliGrp")
    public ProcRf2000pk0OrlovGetCliGrpResponse executeProcRf2000pk0_OrlovGetCliGrp(@RequestParam(value = "p_Usrid", required = false) String pusrid, @RequestParam(value = "p_Prgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRf2000pk0_OrlovGetCliGrp");
        ProcRf2000pk0OrlovGetCliGrpResponse _result = procedureService.executeProcRf2000pk0_OrlovGetCliGrp(pusrid, pprgid);
        LOGGER.debug("got the result for named procedure: ProcRf2000pk0_OrlovGetCliGrp, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1610pk0_excccfAssociateOrder", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Associate Individual Order")
    public ProcKn1610pk0ExcccfAssociateOrderResponse executeProcKn1610pk0_excccfAssociateOrder(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pUsrid", required = false) String pusrid, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pFabseq", required = false) Integer pfabseq, @RequestParam(value = "pCCFno", required = false) String pccfno, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1610pk0_excccfAssociateOrder");
        ProcKn1610pk0ExcccfAssociateOrderResponse _result = procedureService.executeProcKn1610pk0_excccfAssociateOrder(pprgid, pusrid, pordnum, pfabseq, pccfno);
        LOGGER.debug("got the result for named procedure: ProcKn1610pk0_excccfAssociateOrder, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1610pk0_excccfGetCCFFabDiff", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Compare difference between kds and certified fabrics")
    public ProcKn1610pk0ExcccfGetCcffabDiffResponse executeProcKn1610pk0_excccfGetCCFFabDiff(@RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pUsrid", required = false) String pusrid, @RequestParam(value = "pIntfabcertno2", required = false) String pintfabcertno2, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pFabseq", required = false) Integer pfabseq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1610pk0_excccfGetCCFFabDiff");
        ProcKn1610pk0ExcccfGetCcffabDiffResponse _result = procedureService.executeProcKn1610pk0_excccfGetCCFFabDiff(pprgid, pusrid, pintfabcertno2, pordnum, pfabseq);
        LOGGER.debug("got the result for named procedure: ProcKn1610pk0_excccfGetCCFFabDiff, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcRf020pk0GetClrOpt", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcRf020pk0GetClrOpt")
    public ProcRf020pk0getClrOptResponse executeProcRf020pk0GetClrOpt(@RequestParam(value = "p_clroption", required = false) String pclroption, @RequestParam(value = "p_filter", required = false) String pfilter, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRf020pk0GetClrOpt");
        ProcRf020pk0getClrOptResponse _result = procedureService.executeProcRf020pk0GetClrOpt(pclroption, pfilter);
        LOGGER.debug("got the result for named procedure: ProcRf020pk0GetClrOpt, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcTt130pk0_fabdevlibGetYrnCps", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Yarn Composition List")
    public ProcTt130pk0FabdevlibGetYrnCpsResponse executeProcTt130pk0_fabdevlibGetYrnCps(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcTt130pk0_fabdevlibGetYrnCps");
        ProcTt130pk0FabdevlibGetYrnCpsResponse _result = procedureService.executeProcTt130pk0_fabdevlibGetYrnCps();
        LOGGER.debug("got the result for named procedure: ProcTt130pk0_fabdevlibGetYrnCps, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getFabdevreqdet", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "getFabdevreqdet")
    public List<GetFabdevreqdetResponse> executeGetFabdevreqdet(@RequestParam(value = "p_fabdevno", required = false) String pfabdevno, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getFabdevreqdet");
        GetFabdevreqdetResponse _result = procedureService.executeGetFabdevreqdet(pfabdevno);
        LOGGER.debug("got the result for v1 named procedure: getFabdevreqdet, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/updFabdevno", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "update matching fab dev")
    public List<UpdFabdevnoResponse> executeUpdFabdevno(@RequestParam(value = "p_fabAssessno", required = false) String pfabAssessno, @RequestParam(value = "p_fabdevno", required = false) String pfabdevno, @RequestParam(value = "p_ordnum", required = false) String pordnum, @RequestParam(value = "p_fabseq", required = false) Integer pfabseq, @RequestParam(value = "p_fabbaseno", required = false) String pfabbaseno, @RequestParam(value = "p_fabsearchsrc", required = false) String pfabsearchsrc, @RequestParam(value = "p_prgid", required = false) String pprgid, @RequestParam(value = "p_usrid", required = false) String pusrid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: updFabdevno");
        UpdFabdevnoResponse _result = procedureService.executeUpdFabdevno(pfabAssessno, pfabdevno, pordnum, pfabseq, pfabbaseno, pfabsearchsrc, pprgid, pusrid);
        LOGGER.debug("got the result for v1 named procedure: updFabdevno, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/ProcTt130pk0_fabdevlibGetFabFilterOpt", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get itemdes and itemcode for filter option")
    public ProcTt130pk0FabdevlibGetFabFilterOptResponse executeProcTt130pk0_fabdevlibGetFabFilterOpt(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcTt130pk0_fabdevlibGetFabFilterOpt");
        ProcTt130pk0FabdevlibGetFabFilterOptResponse _result = procedureService.executeProcTt130pk0_fabdevlibGetFabFilterOpt();
        LOGGER.debug("got the result for named procedure: ProcTt130pk0_fabdevlibGetFabFilterOpt, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getYrncdes", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of yrn colourdes")
    public List<GetYrncdesResponse> executeGetYrncdes(@RequestParam(value = "p_yrnclr", required = false) String pyrnclr, @RequestParam(value = "p_yrncnt", required = false) String pyrncnt, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getYrncdes");
        GetYrncdesResponse _result = procedureService.executeGetYrncdes(pyrnclr, pyrncnt);
        LOGGER.debug("got the result for v1 named procedure: getYrncdes, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/ProcRf020pk0_QryClrsCompareDeltaE", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcRf020pk0_QryClrsCompareDeltaE")
    public ProcRf020pk0QryClrsCompareDeltaEResponse executeProcRf020pk0_QryClrsCompareDeltaE(@RequestParam(value = "pLabL1", required = false) Double plabL1, @RequestParam(value = "pLabA1", required = false) Double plabA1, @RequestParam(value = "pLabB1", required = false) Double plabB1, @RequestParam(value = "pLabL2", required = false) Double plabL2, @RequestParam(value = "plabA2", required = false) Double plabA2, @RequestParam(value = "pLabB2", required = false) Double plabB2, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRf020pk0_QryClrsCompareDeltaE");
        ProcRf020pk0QryClrsCompareDeltaEResponse _result = procedureService.executeProcRf020pk0_QryClrsCompareDeltaE(plabL1, plabA1, plabB1, plabL2, plabA2, plabB2);
        LOGGER.debug("got the result for named procedure: ProcRf020pk0_QryClrsCompareDeltaE, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcSr741pk0SprocGetFabImages", method = RequestMethod.GET, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcSr741pk0SprocGetFabImages")
    public Downloadable executeProcSr741pk0SprocGetFabImages(@RequestParam(value = "p_ordnum", required = false) String pordnum, @RequestParam(value = "p_fabseq", required = false) Integer pfabseq, @RequestParam(value="downloadAsAttachment", defaultValue = "false") boolean downloadAsAttachment, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcSr741pk0SprocGetFabImages");
        InputStream _result = procedureService.executeProcSr741pk0SprocGetFabImages(pordnum, pfabseq);
        LOGGER.debug("got the result for named procedure: ProcSr741pk0SprocGetFabImages, result:{}", _result);
        return WMMultipartUtils.buildDownloadResponse(_request, _result, downloadAsAttachment);
    }

    @RequestMapping(value = "/procedure/execute/ProcRf020pk0_UpdClrsAddPantone", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcRf020pk0_UpdClrsAddPantone")
    public ProcRf020pk0UpdClrsAddPantoneResponse executeProcRf020pk0_UpdClrsAddPantone(@RequestParam(value = "p_prgid", required = false) String pprgid, @RequestParam(value = "p_userid", required = false) String puserid, @RequestParam(value = "p_pantone", required = false) String ppantone, @RequestParam(value = "p_pantoneCat", required = false) String ppantoneCat, @RequestParam(value = "p_labL", required = false) Double plabL, @RequestParam(value = "p_labA", required = false) Double plabA, @RequestParam(value = "p_labB", required = false) Double plabB, @RequestParam(value = "p_rgbR", required = false) Double prgbR, @RequestParam(value = "p_rgbG", required = false) Double prgbG, @RequestParam(value = "p_rgbB", required = false) Double prgbB, @RequestParam(value = "p_hexval", required = false) String phexval, @RequestParam(value = "p_option", required = false) String poption, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRf020pk0_UpdClrsAddPantone");
        ProcRf020pk0UpdClrsAddPantoneResponse _result = procedureService.executeProcRf020pk0_UpdClrsAddPantone(pprgid, puserid, ppantone, ppantoneCat, plabL, plabA, plabB, prgbR, prgbG, prgbB, phexval, poption);
        LOGGER.debug("got the result for named procedure: ProcRf020pk0_UpdClrsAddPantone, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getYrncpstyp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of yarn cps type")
    public List<GetYrncpstypResponse> executeGetYrncpstyp(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getYrncpstyp");
        GetYrncpstypResponse _result = procedureService.executeGetYrncpstyp();
        LOGGER.debug("got the result for v1 named procedure: getYrncpstyp, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getSpFinish", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of SP Finish")
    public List<GetSpFinishResponse> executeGetSpFinish(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getSpFinish");
        GetSpFinishResponse _result = procedureService.executeGetSpFinish();
        LOGGER.debug("got the result for v1 named procedure: getSpFinish, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getFabtyp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of fab types")
    public List<GetFabtypResponse> executeGetFabtyp(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getFabtyp");
        GetFabtypResponse _result = procedureService.executeGetFabtyp();
        LOGGER.debug("got the result for v1 named procedure: getFabtyp, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/ProcRf020pk0_qryclrsGetColours", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "ProcRf020pk0_qryclrsGetColours")
    public ProcRf020pk0QryclrsGetColoursResponse executeProcRf020pk0_qryclrsGetColours(@RequestParam(value = "p_labL", required = false) Double plabL, @RequestParam(value = "p_labA", required = false) Double plabA, @RequestParam(value = "p_labB", required = false) Double plabB, @RequestParam(value = "p_ToleranceDeltaE", required = false) Double ptoleranceDeltaE, @RequestParam(value = "p_search_opt", required = false) String psearchOpt, @RequestParam(value = "p_labref", required = false) String plabref, @RequestParam(value = "p_value", required = false) String pvalue, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcRf020pk0_qryclrsGetColours");
        ProcRf020pk0QryclrsGetColoursResponse _result = procedureService.executeProcRf020pk0_qryclrsGetColours(plabL, plabA, plabB, ptoleranceDeltaE, psearchOpt, plabref, pvalue);
        LOGGER.debug("got the result for named procedure: ProcRf020pk0_qryclrsGetColours, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getStr", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of Str")
    public List<GetStrResponse> executeGetStr(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getStr");
        GetStrResponse _result = procedureService.executeGetStr();
        LOGGER.debug("got the result for v1 named procedure: getStr, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getInside", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of inside")
    public List<GetInsideResponse> executeGetInside(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getInside");
        GetInsideResponse _result = procedureService.executeGetInside();
        LOGGER.debug("got the result for v1 named procedure: getInside, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getYrnqlty", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get yarn quality")
    public List<GetYrnqltyResponse> executeGetYrnqlty(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getYrnqlty");
        GetYrnqltyResponse _result = procedureService.executeGetYrnqlty();
        LOGGER.debug("got the result for v1 named procedure: getYrnqlty, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getProcTT130PK0_FABDEVLIB_Clicod", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "List of client")
    public GetProcTt130pk0FabdevlibClicodResponse executeGetProcTT130PK0_FABDEVLIB_Clicod(@RequestParam(value = "pPrgid", required = false) String pprgid, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getProcTT130PK0_FABDEVLIB_Clicod");
        GetProcTt130pk0FabdevlibClicodResponse _result = procedureService.executeGetProcTT130PK0_FABDEVLIB_Clicod(pprgid);
        LOGGER.debug("got the result for named procedure: getProcTT130PK0_FABDEVLIB_Clicod, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getMatchingFabs", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get matching fabs")
    public List<GetMatchingFabsResponse> executeGetMatchingFabs(@RequestParam(value = "pUsrid", required = false) String pusrid, @RequestParam(value = "pPrgid", required = false) String pprgid, @RequestParam(value = "pFabFilterOption", required = false) String pfabFilterOption, @RequestParam(value = "pFabtyp", required = false) String pfabtyp, @RequestParam(value = "pInside", required = false) String pinside, @RequestParam(value = "pOutside", required = false) String poutside, @RequestParam(value = "pEnzyme", required = false) String penzyme, @RequestParam(value = "pSpfinish", required = false) String pspfinish, @RequestParam(value = "pStr", required = false) String pstr, @RequestParam(value = "pStripeid", required = false) String pstripeid, @RequestParam(value = "pDccode", required = false) String pdccode, @RequestParam(value = "pLDecoroute", required = false) String pldecoroute, @RequestParam(value = "pYarnList", required = false) String pyarnList, @RequestParam(value = "pYrncnt", required = false) String pyrncnt, @RequestParam(value = "pYrncps", required = false) String pyrncps, @RequestParam(value = "pYrnclr", required = false) String pyrnclr, @RequestParam(value = "pOriclr", required = false) String poriclr, @RequestParam(value = "pYrnqlty", required = false) String pyrnqlty, @RequestParam(value = "pYrnsubqltya", required = false) String pyrnsubqltya, @RequestParam(value = "pYrnsubqltyb", required = false) String pyrnsubqltyb, @RequestParam(value = "pYrnffcod", required = false) String pyrnffcod, @RequestParam(value = "pYrnClrref", required = false) String pyrnClrref, @RequestParam(value = "pFabwgtfrom", required = false) Integer pfabwgtfrom, @RequestParam(value = "pFabwgtto", required = false) Integer pfabwgtto, @RequestParam(value = "pBsffabwgtfrom", required = false) Integer pbsffabwgtfrom, @RequestParam(value = "pBsffabwgtto", required = false) Integer pbsffabwgtto, @RequestParam(value = "pMchgaufrom", required = false) Integer pmchgaufrom, @RequestParam(value = "pMchgauto", required = false) Integer pmchgauto, @RequestParam(value = "pcpsField", required = false) String pcpsField, @RequestParam(value = "pcpstypA", required = false) String pcpstypA, @RequestParam(value = "pcpstypAFrom", required = false) Integer pcpstypAfrom, @RequestParam(value = "pcpstypATo", required = false) Integer pcpstypAto, @RequestParam(value = "pcpstypB", required = false) String pcpstypB, @RequestParam(value = "pcpstypBFrom", required = false) Integer pcpstypBfrom, @RequestParam(value = "pcpstypBTo", required = false) Integer pcpstypBto, @RequestParam(value = "pcpstypC", required = false) String pcpstypC, @RequestParam(value = "pcpstypCFrom", required = false) Integer pcpstypCfrom, @RequestParam(value = "pcpstypCTo", required = false) Integer pcpstypCto, @RequestParam(value = "p_fabdevno", required = false) String pfabdevno, @RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pfabsubcatdes", required = false) String pfabsubcatdes, @RequestParam(value = "pSkuno", required = false) String pskuno, @RequestParam(value = "pFabdcodelist", required = false) String pfabdcodelist, @RequestParam(value = "pCalstn", required = false) String pcalstn, @RequestParam(value = "pIntfabcertno", required = false) String pintfabcertno, @RequestParam(value = "pOrderwithHanger", required = false) String porderwithHanger, @RequestParam(value = "pCligrp", required = false) String pcligrp, @RequestParam(value = "pTemplateSeq", required = false) String ptemplateSeq, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getMatchingFabs");
        GetMatchingFabsResponse _result = procedureService.executeGetMatchingFabs(pusrid, pprgid, pfabFilterOption, pfabtyp, pinside, poutside, penzyme, pspfinish, pstr, pstripeid, pdccode, pldecoroute, pyarnList, pyrncnt, pyrncps, pyrnclr, poriclr, pyrnqlty, pyrnsubqltya, pyrnsubqltyb, pyrnffcod, pyrnClrref, pfabwgtfrom, pfabwgtto, pbsffabwgtfrom, pbsffabwgtto, pmchgaufrom, pmchgauto, pcpsField, pcpstypA, pcpstypAfrom, pcpstypAto, pcpstypB, pcpstypBfrom, pcpstypBto, pcpstypC, pcpstypCfrom, pcpstypCto, pfabdevno, pordnum, pfabsubcatdes, pskuno, pfabdcodelist, pcalstn, pintfabcertno, porderwithHanger, pcligrp, ptemplateSeq);
        LOGGER.debug("got the result for v1 named procedure: getMatchingFabs, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/getLdecoroute", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of LDecoRoute")
    public List<GetLdecorouteResponse> executeGetLdecoroute(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getLdecoroute");
        GetLdecorouteResponse _result = procedureService.executeGetLdecoroute();
        LOGGER.debug("got the result for v1 named procedure: getLdecoroute, result:{}", _result);
        return Collections.singletonList(_result);
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1610pk0_excccfProcExcpCertifyFab", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Update Sts of certify Fab")
    public ProcKn1610pk0ExcccfProcExcpCertifyFabResponse executeProcKn1610pk0_excccfProcExcpCertifyFab(@RequestParam(value = "p_prgid", required = false) String pprgid, @RequestParam(value = "p_usrid", required = false) String pusrid, @RequestParam(value = "p_ordnum", required = false) String pordnum, @RequestParam(value = "p_fabseq", required = false) Integer pfabseq, @RequestParam(value = "p_newsts", required = false) String pnewsts, @RequestParam(value = "p_newremarks", required = false) String pnewremarks, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1610pk0_excccfProcExcpCertifyFab");
        ProcKn1610pk0ExcccfProcExcpCertifyFabResponse _result = procedureService.executeProcKn1610pk0_excccfProcExcpCertifyFab(pprgid, pusrid, pordnum, pfabseq, pnewsts, pnewremarks);
        LOGGER.debug("got the result for named procedure: ProcKn1610pk0_excccfProcExcpCertifyFab, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/ProcKn1620pk0CcfmQryGetMatchDet", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get Match details")
    public ProcKn1620pk0ccfmQryGetMatchDetResponse executeProcKn1620pk0CcfmQryGetMatchDet(@RequestParam(value = "p_sintfabcertno", required = false) String psintfabcertno, @RequestParam(value = "p_dintfabcertno", required = false) String pdintfabcertno, @RequestParam(value = "p_ccffilter", required = false) String pccffilter, HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: ProcKn1620pk0CcfmQryGetMatchDet");
        ProcKn1620pk0ccfmQryGetMatchDetResponse _result = procedureService.executeProcKn1620pk0CcfmQryGetMatchDet(psintfabcertno, pdintfabcertno, pccffilter);
        LOGGER.debug("got the result for named procedure: ProcKn1620pk0CcfmQryGetMatchDet, result:{}", _result);
        return _result;
    }

    @RequestMapping(value = "/procedure/execute/getDccode", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "get list of Dccodes")
    public List<GetDccodeResponse> executeGetDccode(HttpServletRequest _request) {
        LOGGER.debug("Executing named procedure: getDccode");
        GetDccodeResponse _result = procedureService.executeGetDccode();
        LOGGER.debug("got the result for v1 named procedure: getDccode, result:{}", _result);
        return Collections.singletonList(_result);
    }

}