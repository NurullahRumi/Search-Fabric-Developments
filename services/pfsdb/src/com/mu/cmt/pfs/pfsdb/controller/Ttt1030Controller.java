/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.hibernate.TypeMismatchException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mu.cmt.pfs.pfsdb.Ttt1030;
import com.mu.cmt.pfs.pfsdb.service.Ttt1030Service;


/**
 * Controller object for domain model class Ttt1030.
 * @see Ttt1030
 */
@RestController("pfsdb.Ttt1030Controller")
@Api(value = "Ttt1030Controller", description = "Exposes APIs to work with Ttt1030 resource.")
@RequestMapping("/pfsdb/Ttt1030")
public class Ttt1030Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Ttt1030Controller.class);

    @Autowired
	@Qualifier("pfsdb.Ttt1030Service")
	private Ttt1030Service ttt1030Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Ttt1030 instance.")
    @RequestMapping(method = RequestMethod.POST, consumes = "multipart/form-data")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ttt1030 createTtt1030(@RequestPart("wm_data_json") Ttt1030 ttt1030, @RequestPart(value = "docfile", required = false) MultipartFile _docfile, @RequestPart(value = "docthumb", required = false) MultipartFile _docthumb) {
		LOGGER.debug("Create Ttt1030 with information: {}" , ttt1030);

    ttt1030.setDocfile(WMMultipartUtils.toByteArray(_docfile));
    ttt1030.setDocthumb(WMMultipartUtils.toByteArray(_docthumb));
		ttt1030 = ttt1030Service.create(ttt1030);
		LOGGER.debug("Created Ttt1030 with information: {}" , ttt1030);

	    return ttt1030;
	}

    @ApiOperation(value = "Returns the Ttt1030 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ttt1030 getTtt1030(@PathVariable("id") Long id) {
        LOGGER.debug("Getting Ttt1030 with id: {}" , id);

        Ttt1030 foundTtt1030 = ttt1030Service.getById(id);
        LOGGER.debug("Ttt1030 details with id: {}" , foundTtt1030);

        return foundTtt1030;
    }

    @ApiOperation(value = "Retrieves content for the given BLOB field in Ttt1030 instance" )
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public DownloadResponse getTtt1030BLOBContent(@PathVariable("id") Long id, @PathVariable("fieldName") String fieldName, HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam(value="download", defaultValue = "false") boolean download) {

        LOGGER.debug("Retrieves content for the given BLOB field {} in Ttt1030 instance" , fieldName);

        if(!WMRuntimeUtils.isLob(Ttt1030.class, fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Ttt1030 ttt1030 = ttt1030Service.getById(id);

        return WMMultipartUtils.buildDownloadResponseForBlob(ttt1030, fieldName, httpServletRequest, download);
    }

    @ApiOperation(value = "Updates the Ttt1030 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ttt1030 editTtt1030(@PathVariable("id") Long id, @RequestBody Ttt1030 ttt1030) {
        LOGGER.debug("Editing Ttt1030 with id: {}" , ttt1030.getDocid());

        ttt1030.setDocid(id);
        ttt1030 = ttt1030Service.update(ttt1030);
        LOGGER.debug("Ttt1030 details with id: {}" , ttt1030);

        return ttt1030;
    }

    @ApiOperation(value = "Updates the Ttt1030 instance associated with the given id.This API should be used when Ttt1030 instance fields that require multipart data.") 
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ttt1030 editTtt1030(@PathVariable("id") Long id, MultipartHttpServletRequest multipartHttpServletRequest) {
        Ttt1030 newTtt1030 = WMMultipartUtils.toObject(multipartHttpServletRequest, Ttt1030.class, "pfsdb");
        newTtt1030.setDocid(id);

        Ttt1030 oldTtt1030 = ttt1030Service.getById(id);
        WMMultipartUtils.updateLobsContent(oldTtt1030, newTtt1030);
        LOGGER.debug("Updating Ttt1030 with information: {}" , newTtt1030);

        return ttt1030Service.update(newTtt1030);
    }

    @ApiOperation(value = "Deletes the Ttt1030 instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteTtt1030(@PathVariable("id") Long id) {
        LOGGER.debug("Deleting Ttt1030 with id: {}" , id);

        Ttt1030 deletedTtt1030 = ttt1030Service.delete(id);

        return deletedTtt1030 != null;
    }

    /**
     * @deprecated Use {@link #findTtt1030s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Ttt1030 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Ttt1030> searchTtt1030sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Ttt1030s list by query filter:{}", (Object) queryFilters);
        return ttt1030Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Ttt1030 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Ttt1030> findTtt1030s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Ttt1030s list by filter:", query);
        return ttt1030Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Ttt1030 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Ttt1030> filterTtt1030s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Ttt1030s list by filter", query);
        return ttt1030Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportTtt1030s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return ttt1030Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportTtt1030sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Ttt1030.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> ttt1030Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Ttt1030 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countTtt1030s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Ttt1030s");
		return ttt1030Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getTtt1030AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return ttt1030Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Ttt1030Service instance
	 */
	protected void setTtt1030Service(Ttt1030Service service) {
		this.ttt1030Service = service;
	}

}