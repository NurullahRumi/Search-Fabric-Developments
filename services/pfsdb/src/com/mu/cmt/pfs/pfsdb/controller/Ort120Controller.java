/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.mu.cmt.pfs.pfsdb.Ort120;
import com.mu.cmt.pfs.pfsdb.Ort120Id;
import com.mu.cmt.pfs.pfsdb.service.Ort120Service;


/**
 * Controller object for domain model class Ort120.
 * @see Ort120
 */
@RestController("pfsdb.Ort120Controller")
@Api(value = "Ort120Controller", description = "Exposes APIs to work with Ort120 resource.")
@RequestMapping("/pfsdb/Ort120")
public class Ort120Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Ort120Controller.class);

    @Autowired
	@Qualifier("pfsdb.Ort120Service")
	private Ort120Service ort120Service;

	@Autowired
	private ExportedFileManager exportedFileManager;

	@ApiOperation(value = "Creates a new Ort120 instance.")
    @RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ort120 createOrt120(@RequestBody Ort120 ort120) {
		LOGGER.debug("Create Ort120 with information: {}" , ort120);

		ort120 = ort120Service.create(ort120);
		LOGGER.debug("Created Ort120 with information: {}" , ort120);

	    return ort120;
	}

    @ApiOperation(value = "Returns the Ort120 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ort120 getOrt120(@RequestParam("ordnum") String ordnum, @RequestParam("fabseq") Byte fabseq) {

        Ort120Id ort120Id = new Ort120Id();
        ort120Id.setOrdnum(ordnum);
        ort120Id.setFabseq(fabseq);

        LOGGER.debug("Getting Ort120 with id: {}" , ort120Id);
        Ort120 ort120 = ort120Service.getById(ort120Id);
        LOGGER.debug("Ort120 details with id: {}" , ort120);

        return ort120;
    }



    @ApiOperation(value = "Updates the Ort120 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Ort120 editOrt120(@RequestParam("ordnum") String ordnum, @RequestParam("fabseq") Byte fabseq, @RequestBody Ort120 ort120) {

        ort120.setOrdnum(ordnum);
        ort120.setFabseq(fabseq);

        LOGGER.debug("Ort120 details with id is updated with: {}" , ort120);

        return ort120Service.update(ort120);
    }


    @ApiOperation(value = "Deletes the Ort120 instance associated with the given composite-id.")
    @RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteOrt120(@RequestParam("ordnum") String ordnum, @RequestParam("fabseq") Byte fabseq) {

        Ort120Id ort120Id = new Ort120Id();
        ort120Id.setOrdnum(ordnum);
        ort120Id.setFabseq(fabseq);

        LOGGER.debug("Deleting Ort120 with id: {}" , ort120Id);
        Ort120 ort120 = ort120Service.delete(ort120Id);

        return ort120 != null;
    }


    /**
     * @deprecated Use {@link #findOrt120s(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of Ort120 instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Ort120> searchOrt120sByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Ort120s list by query filter:{}", (Object) queryFilters);
        return ort120Service.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Ort120 instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Ort120> findOrt120s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Ort120s list by filter:", query);
        return ort120Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of Ort120 instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<Ort120> filterOrt120s(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Ort120s list by filter", query);
        return ort120Service.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportOrt120s(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return ort120Service.export(exportType, query, pageable);
    }

    @ApiOperation(value = "Returns a URL to download a file for the data matching the optional query (q) request param and the required fields provided in the Export Options.") 
    @RequestMapping(value = "/export", method = {RequestMethod.POST}, consumes = "application/json")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportOrt120sAndGetURL(@RequestBody DataExportOptions exportOptions, Pageable pageable) {
        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = Ort120.class.getSimpleName();
        }
        exportedFileName += exportOptions.getExportType().getExtension();
        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName, outputStream -> ort120Service.export(exportOptions, pageable, outputStream));
        return new StringWrapper(exportedUrl);
    }

	@ApiOperation(value = "Returns the total count of Ort120 instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countOrt120s( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Ort120s");
		return ort120Service.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getOrt120AggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return ort120Service.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service Ort120Service instance
	 */
	protected void setOrt120Service(Ort120Service service) {
		this.ort120Service = service;
	}

}