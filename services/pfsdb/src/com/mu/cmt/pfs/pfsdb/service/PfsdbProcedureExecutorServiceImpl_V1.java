/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.sql.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.procedure.WMProcedureExecutor;
import com.wavemaker.runtime.data.exception.BlobContentNotFoundException;

import com.mu.cmt.pfs.pfsdb.models.procedure.*;

@Service
public class PfsdbProcedureExecutorServiceImpl_V1 implements PfsdbProcedureExecutorService_V1 {

    private static final Logger LOGGER = LoggerFactory.getLogger(PfsdbProcedureExecutorServiceImpl.class);

    @Autowired
    @Qualifier("pfsdbWMProcedureExecutor")
    private WMProcedureExecutor procedureExecutor;

    public List<Object> executeGetEnzyme() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getEnzyme", params);

    }

    public List<Object> executeGetYrnclr() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getYrnclr", params);

    }

    public List<Object> executeGetYrncnt() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getYrncnt", params);

    }

    public List<Object> executeGetYrnffcod() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getYrnffcod", params);

    }

    public List<Object> executeGetOutside() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getOutside", params);

    }

    public List<Object> executeGetYrnsubqltyb(String pyrnqlty) {
        Map params = new HashMap(2);

        params.put("p_yrnqlty", pyrnqlty);

        return procedureExecutor.executeNamedProcedure("getYrnsubqltyb", params);

    }

    public List<Object> executeGetYrnsubqltya(String pyrnqlty) {
        Map params = new HashMap(2);

        params.put("p_yrnqlty", pyrnqlty);

        return procedureExecutor.executeNamedProcedure("getYrnsubqltya", params);

    }

    public List<Object> executeGetYrnsubqltyc(String pyrnqlty) {
        Map params = new HashMap(2);

        params.put("p_yrnqlty", pyrnqlty);

        return procedureExecutor.executeNamedProcedure("getYrnsubqltyc", params);

    }

    public List<Object> executeGetFabdevreqdet(String pfabdevno) {
        Map params = new HashMap(3);

        params.put("p_fabdevno", pfabdevno);

        return procedureExecutor.executeNamedProcedure("getFabdevreqdet", params);

    }

    public List<Object> executeUpdFabdevno(String pfabAssessno, String pfabdevno, String pordnum, Integer pfabseq, String pfabbaseno, String pfabsearchsrc, String pprgid, String pusrid) {
        Map params = new HashMap(10);

        params.put("p_fabAssessno", pfabAssessno);
        params.put("p_fabdevno", pfabdevno);
        params.put("p_ordnum", pordnum);
        params.put("p_fabseq", pfabseq);
        params.put("p_fabbaseno", pfabbaseno);
        params.put("p_fabsearchsrc", pfabsearchsrc);
        params.put("p_prgid", pprgid);
        params.put("p_usrid", pusrid);

        return procedureExecutor.executeNamedProcedure("updFabdevno", params);

    }

    public List<Object> executeGetYrncdes(String pyrnclr, String pyrncnt) {
        Map params = new HashMap(3);

        params.put("p_yrnclr", pyrnclr);
        params.put("p_yrncnt", pyrncnt);

        return procedureExecutor.executeNamedProcedure("getYrncdes", params);

    }

    public List<Object> executeGetYrncpstyp() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getYrncpstyp", params);

    }

    public List<Object> executeGetSpFinish() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getSpFinish", params);

    }

    public List<Object> executeGetFabtyp() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getFabtyp", params);

    }

    public List<Object> executeGetStr() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getStr", params);

    }

    public List<Object> executeGetInside() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getInside", params);

    }

    public List<Object> executeGetYrnqlty() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getYrnqlty", params);

    }

    public List<Object> executeGetMatchingFabs(String pusrid, String pprgid, String pfabFilterOption, String pfabtyp, String pinside, String poutside, String penzyme, String pspfinish, String pstr, String pstripeid, String pdccode, String pldecoroute, String pyarnList, String pyrncnt, String pyrncps, String pyrnclr, String poriclr, String pyrnqlty, String pyrnsubqltya, String pyrnsubqltyb, String pyrnffcod, String pyrnClrref, Integer pfabwgtfrom, Integer pfabwgtto, Integer pbsffabwgtfrom, Integer pbsffabwgtto, Integer pmchgaufrom, Integer pmchgauto, String pcpsField, String pcpstypA, Integer pcpstypAfrom, Integer pcpstypAto, String pcpstypB, Integer pcpstypBfrom, Integer pcpstypBto, String pcpstypC, Integer pcpstypCfrom, Integer pcpstypCto, String pfabdevno, String pordnum, String pfabsubcatdes, String pskuno, String pfabdcodelist, String pcalstn, String pintfabcertno, String porderwithHanger, String pcligrp, String ptemplateSeq) {
        Map params = new HashMap(50);

        params.put("pUsrid", pusrid);
        params.put("pPrgid", pprgid);
        params.put("pFabFilterOption", pfabFilterOption);
        params.put("pFabtyp", pfabtyp);
        params.put("pInside", pinside);
        params.put("pOutside", poutside);
        params.put("pEnzyme", penzyme);
        params.put("pSpfinish", pspfinish);
        params.put("pStr", pstr);
        params.put("pStripeid", pstripeid);
        params.put("pDccode", pdccode);
        params.put("pLDecoroute", pldecoroute);
        params.put("pYarnList", pyarnList);
        params.put("pYrncnt", pyrncnt);
        params.put("pYrncps", pyrncps);
        params.put("pYrnclr", pyrnclr);
        params.put("pOriclr", poriclr);
        params.put("pYrnqlty", pyrnqlty);
        params.put("pYrnsubqltya", pyrnsubqltya);
        params.put("pYrnsubqltyb", pyrnsubqltyb);
        params.put("pYrnffcod", pyrnffcod);
        params.put("pYrnClrref", pyrnClrref);
        params.put("pFabwgtfrom", pfabwgtfrom);
        params.put("pFabwgtto", pfabwgtto);
        params.put("pBsffabwgtfrom", pbsffabwgtfrom);
        params.put("pBsffabwgtto", pbsffabwgtto);
        params.put("pMchgaufrom", pmchgaufrom);
        params.put("pMchgauto", pmchgauto);
        params.put("pcpsField", pcpsField);
        params.put("pcpstypA", pcpstypA);
        params.put("pcpstypAFrom", pcpstypAfrom);
        params.put("pcpstypATo", pcpstypAto);
        params.put("pcpstypB", pcpstypB);
        params.put("pcpstypBFrom", pcpstypBfrom);
        params.put("pcpstypBTo", pcpstypBto);
        params.put("pcpstypC", pcpstypC);
        params.put("pcpstypCFrom", pcpstypCfrom);
        params.put("pcpstypCTo", pcpstypCto);
        params.put("p_fabdevno", pfabdevno);
        params.put("pOrdnum", pordnum);
        params.put("pfabsubcatdes", pfabsubcatdes);
        params.put("pSkuno", pskuno);
        params.put("pFabdcodelist", pfabdcodelist);
        params.put("pCalstn", pcalstn);
        params.put("pIntfabcertno", pintfabcertno);
        params.put("pOrderwithHanger", porderwithHanger);
        params.put("pCligrp", pcligrp);
        params.put("pTemplateSeq", ptemplateSeq);

        return procedureExecutor.executeNamedProcedure("getMatchingFabs", params);

    }

    public List<Object> executeGetLdecoroute() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getLdecoroute", params);

    }

    public List<Object> executeGetDccode() {
        Map params = new HashMap(1);


        return procedureExecutor.executeNamedProcedure("getDccode", params);

    }

}