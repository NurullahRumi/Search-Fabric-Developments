/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mu.cmt.pfs.pfsdb.Ttt1030;

/**
 * Service object for domain model class {@link Ttt1030}.
 */
public interface Ttt1030Service {

    /**
     * Creates a new Ttt1030. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Ttt1030 if any.
     *
     * @param ttt1030 Details of the Ttt1030 to be created; value cannot be null.
     * @return The newly created Ttt1030.
     */
    Ttt1030 create(@Valid Ttt1030 ttt1030);


	/**
     * Returns Ttt1030 by given id if exists.
     *
     * @param ttt1030Id The id of the Ttt1030 to get; value cannot be null.
     * @return Ttt1030 associated with the given ttt1030Id.
	 * @throws EntityNotFoundException If no Ttt1030 is found.
     */
    Ttt1030 getById(Long ttt1030Id);

    /**
     * Find and return the Ttt1030 by given id if exists, returns null otherwise.
     *
     * @param ttt1030Id The id of the Ttt1030 to get; value cannot be null.
     * @return Ttt1030 associated with the given ttt1030Id.
     */
    Ttt1030 findById(Long ttt1030Id);

	/**
     * Find and return the list of Ttt1030s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param ttt1030Ids The id's of the Ttt1030 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Ttt1030s associated with the given ttt1030Ids.
     */
    List<Ttt1030> findByMultipleIds(List<Long> ttt1030Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing Ttt1030. It replaces all fields of the existing Ttt1030 with the given ttt1030.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Ttt1030 if any.
     *
     * @param ttt1030 The details of the Ttt1030 to be updated; value cannot be null.
     * @return The updated Ttt1030.
     * @throws EntityNotFoundException if no Ttt1030 is found with given input.
     */
    Ttt1030 update(@Valid Ttt1030 ttt1030);

    /**
     * Deletes an existing Ttt1030 with the given id.
     *
     * @param ttt1030Id The id of the Ttt1030 to be deleted; value cannot be null.
     * @return The deleted Ttt1030.
     * @throws EntityNotFoundException if no Ttt1030 found with the given id.
     */
    Ttt1030 delete(Long ttt1030Id);

    /**
     * Deletes an existing Ttt1030 with the given object.
     *
     * @param ttt1030 The instance of the Ttt1030 to be deleted; value cannot be null.
     */
    void delete(Ttt1030 ttt1030);

    /**
     * Find all Ttt1030s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Ttt1030s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Ttt1030> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Ttt1030s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Ttt1030s.
     *
     * @see Pageable
     * @see Page
     */
    Page<Ttt1030> findAll(String query, Pageable pageable);

    /**
     * Exports all Ttt1030s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Ttt1030s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Ttt1030s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Ttt1030.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}