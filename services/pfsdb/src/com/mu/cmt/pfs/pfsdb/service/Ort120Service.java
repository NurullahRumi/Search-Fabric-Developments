/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mu.cmt.pfs.pfsdb.Ort120;
import com.mu.cmt.pfs.pfsdb.Ort120Id;

/**
 * Service object for domain model class {@link Ort120}.
 */
public interface Ort120Service {

    /**
     * Creates a new Ort120. It does cascade insert for all the children in a single transaction.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Ort120 if any.
     *
     * @param ort120 Details of the Ort120 to be created; value cannot be null.
     * @return The newly created Ort120.
     */
    Ort120 create(@Valid Ort120 ort120);


	/**
     * Returns Ort120 by given id if exists.
     *
     * @param ort120Id The id of the Ort120 to get; value cannot be null.
     * @return Ort120 associated with the given ort120Id.
	 * @throws EntityNotFoundException If no Ort120 is found.
     */
    Ort120 getById(Ort120Id ort120Id);

    /**
     * Find and return the Ort120 by given id if exists, returns null otherwise.
     *
     * @param ort120Id The id of the Ort120 to get; value cannot be null.
     * @return Ort120 associated with the given ort120Id.
     */
    Ort120 findById(Ort120Id ort120Id);

	/**
     * Find and return the list of Ort120s by given id's.
     *
     * If orderedReturn true, the return List is ordered and positional relative to the incoming ids.
     *
     * In case of unknown entities:
     *
     * If enabled, A null is inserted into the List at the proper position(s).
     * If disabled, the nulls are not put into the return List.
     *
     * @param ort120Ids The id's of the Ort120 to get; value cannot be null.
     * @param orderedReturn Should the return List be ordered and positional in relation to the incoming ids?
     * @return Ort120s associated with the given ort120Ids.
     */
    List<Ort120> findByMultipleIds(List<Ort120Id> ort120Ids, boolean orderedReturn);


    /**
     * Updates the details of an existing Ort120. It replaces all fields of the existing Ort120 with the given ort120.
     *
     * This method overrides the input field values using Server side or database managed properties defined on Ort120 if any.
     *
     * @param ort120 The details of the Ort120 to be updated; value cannot be null.
     * @return The updated Ort120.
     * @throws EntityNotFoundException if no Ort120 is found with given input.
     */
    Ort120 update(@Valid Ort120 ort120);

    /**
     * Deletes an existing Ort120 with the given id.
     *
     * @param ort120Id The id of the Ort120 to be deleted; value cannot be null.
     * @return The deleted Ort120.
     * @throws EntityNotFoundException if no Ort120 found with the given id.
     */
    Ort120 delete(Ort120Id ort120Id);

    /**
     * Deletes an existing Ort120 with the given object.
     *
     * @param ort120 The instance of the Ort120 to be deleted; value cannot be null.
     */
    void delete(Ort120 ort120);

    /**
     * Find all Ort120s matching the given QueryFilter(s).
     * All the QueryFilter(s) are ANDed to filter the results.
     * This method returns Paginated results.
     *
     * @deprecated Use {@link #findAll(String, Pageable)} instead.
     *
     * @param queryFilters Array of queryFilters to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Ort120s.
     *
     * @see QueryFilter
     * @see Pageable
     * @see Page
     */
    @Deprecated
    Page<Ort120> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
     * Find all Ort120s matching the given input query. This method returns Paginated results.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null returns all matching records.
     * @return Paginated list of matching Ort120s.
     *
     * @see Pageable
     * @see Page
     */
    Page<Ort120> findAll(String query, Pageable pageable);

    /**
     * Exports all Ort120s matching the given input query to the given exportType format.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param exportType The format in which to export the data; value cannot be null.
     * @param query The query to filter the results; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return The Downloadable file in given export type.
     *
     * @see Pageable
     * @see ExportType
     * @see Downloadable
     */
    Downloadable export(ExportType exportType, String query, Pageable pageable);

    /**
     * Exports all Ort120s matching the given input query to the given exportType format.
     *
     * @param options The export options provided by the user; No filters applied if the input is null/empty.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @param outputStream The output stream of the file for the exported data to be written to.
     *
     * @see DataExportOptions
     * @see Pageable
     * @see OutputStream
     */
    void export(DataExportOptions options, Pageable pageable, OutputStream outputStream);

    /**
     * Retrieve the count of the Ort120s in the repository with matching query.
     * Note: Go through the documentation for <u>query</u> syntax.
     *
     * @param query query to filter results. No filters applied if the input is null/empty.
     * @return The count of the Ort120.
     */
    long count(String query);

    /**
     * Retrieve aggregated values with matching aggregation info.
     *
     * @param aggregationInfo info related to aggregations.
     * @param pageable Details of the pagination information along with the sorting options. If null exports all matching records.
     * @return Paginated data with included fields.
     *
     * @see AggregationInfo
     * @see Pageable
     * @see Page
	 */
    Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable);


}