/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.commons.wrapper.StringWrapper;
import com.wavemaker.runtime.data.export.ExportOptions;
import com.wavemaker.runtime.file.manager.ExportedFileManager;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.mu.cmt.pfs.pfsdb.service.PfsdbQueryExecutorService;
import com.mu.cmt.pfs.pfsdb.models.query.*;

@RestController(value = "Pfsdb.QueryExecutionController")
@RequestMapping("/pfsdb/queryExecutor")
@Api(value = "QueryExecutionController", description = "controller class for query execution")
public class QueryExecutionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(QueryExecutionController.class);

    @Autowired
    private PfsdbQueryExecutorService queryService;

    @Autowired
	private ExportedFileManager exportedFileManager;

    @RequestMapping(value = "/queries/QryStrLcnCod", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Find the location of a store")
    public Page<QryStrLcnCodResponse> executeQryStrLcnCod(@RequestParam(value = "strcod", required = false) String strcod, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryStrLcnCod");
        Page<QryStrLcnCodResponse> _result = queryService.executeQryStrLcnCod(strcod, pageable);
        LOGGER.debug("got the result for named query: QryStrLcnCod, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryStrLcnCod")
    @RequestMapping(value = "/queries/QryStrLcnCod/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryStrLcnCod(@RequestParam(value = "strcod", required = false) String strcod, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryStrLcnCod");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryStrLcnCod";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryStrLcnCod(strcod,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryLovSwatchFormat", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query REquest For Swatch Format")
    public Page<QryLovSwatchFormatResponse> executeQryLovSwatchFormat(@RequestParam(value = "p_Purpose", required = false) String ppurpose, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryLovSwatchFormat");
        Page<QryLovSwatchFormatResponse> _result = queryService.executeQryLovSwatchFormat(ppurpose, pageable);
        LOGGER.debug("got the result for named query: qryLovSwatchFormat, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryLovSwatchFormat")
    @RequestMapping(value = "/queries/qryLovSwatchFormat/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryLovSwatchFormat(@RequestParam(value = "p_Purpose", required = false) String ppurpose, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryLovSwatchFormat");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryLovSwatchFormat";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryLovSwatchFormat(ppurpose,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryGetFabtyp", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "qry get fab types")
    public Page<QryGetFabtypResponse> executeQryGetFabtyp(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryGetFabtyp");
        Page<QryGetFabtypResponse> _result = queryService.executeQryGetFabtyp(pageable);
        LOGGER.debug("got the result for named query: qryGetFabtyp, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryGetFabtyp")
    @RequestMapping(value = "/queries/qryGetFabtyp/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetFabtyp(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryGetFabtyp");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryGetFabtyp";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetFabtyp( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/qryLovItems", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query Rft850 items")
    public Page<QryLovItemsResponse> executeQryLovItems(@RequestParam(value = "pLovfld", required = false) String plovfld, @RequestParam(value = "pTab", required = false) String ptab, @RequestParam(value = "pShowAll", required = false) String pshowAll, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: qryLovItems");
        Page<QryLovItemsResponse> _result = queryService.executeQryLovItems(plovfld, ptab, pshowAll, pageable);
        LOGGER.debug("got the result for named query: qryLovItems, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query qryLovItems")
    @RequestMapping(value = "/queries/qryLovItems/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryLovItems(@RequestParam(value = "pLovfld", required = false) String plovfld, @RequestParam(value = "pTab", required = false) String ptab, @RequestParam(value = "pShowAll", required = false) String pshowAll, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: qryLovItems");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "qryLovItems";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryLovItems(plovfld, ptab, pshowAll,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryWarehouseLoc", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QryWarehouseLoc")
    public Page<QryWarehouseLocResponse> executeQryWarehouseLoc(@RequestParam(value = "pitemdes3", required = false) String pitemdes3, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryWarehouseLoc");
        Page<QryWarehouseLocResponse> _result = queryService.executeQryWarehouseLoc(pitemdes3, pageable);
        LOGGER.debug("got the result for named query: QryWarehouseLoc, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryWarehouseLoc")
    @RequestMapping(value = "/queries/QryWarehouseLoc/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryWarehouseLoc(@RequestParam(value = "pitemdes3", required = false) String pitemdes3, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryWarehouseLoc");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryWarehouseLoc";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryWarehouseLoc(pitemdes3,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryStrCodLcn", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Store code and location")
    public Page<QryStrCodLcnResponse> executeQryStrCodLcn(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryStrCodLcn");
        Page<QryStrCodLcnResponse> _result = queryService.executeQryStrCodLcn(pageable);
        LOGGER.debug("got the result for named query: QryStrCodLcn, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryStrCodLcn")
    @RequestMapping(value = "/queries/QryStrCodLcn/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryStrCodLcn(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryStrCodLcn");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryStrCodLcn";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryStrCodLcn( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryFabSubCat", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Get FabSubCat")
    public Page<QryFabSubCatResponse> executeQryFabSubCat(Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryFabSubCat");
        Page<QryFabSubCatResponse> _result = queryService.executeQryFabSubCat(pageable);
        LOGGER.debug("got the result for named query: QryFabSubCat, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryFabSubCat")
    @RequestMapping(value = "/queries/QryFabSubCat/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryFabSubCat(@RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryFabSubCat");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryFabSubCat";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryFabSubCat( exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryStockLocation", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "list of store location for the StockType")
    public Page<QryStockLocationResponse> executeQryStockLocation(@RequestParam(value = "pStockType", required = false) String pstockType, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryStockLocation");
        Page<QryStockLocationResponse> _result = queryService.executeQryStockLocation(pstockType, pageable);
        LOGGER.debug("got the result for named query: QryStockLocation, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryStockLocation")
    @RequestMapping(value = "/queries/QryStockLocation/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryStockLocation(@RequestParam(value = "pStockType", required = false) String pstockType, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryStockLocation");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryStockLocation";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryStockLocation(pstockType,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryYarnId", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Query Yarn Details")
    public Page<QryYarnIdResponse> executeQryYarnId(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pYrnid", required = false) Integer pyrnid, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryYarnId");
        Page<QryYarnIdResponse> _result = queryService.executeQryYarnId(pordnum, pyrnid, pageable);
        LOGGER.debug("got the result for named query: QryYarnId, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryYarnId")
    @RequestMapping(value = "/queries/QryYarnId/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryYarnId(@RequestParam(value = "pOrdnum", required = false) String pordnum, @RequestParam(value = "pYrnid", required = false) Integer pyrnid, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryYarnId");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryYarnId";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryYarnId(pordnum, pyrnid,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

    @RequestMapping(value = "/queries/QryGetThemes", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "QryGetThemes for stock search")
    public Page<QryGetThemesResponse> executeQryGetThemes(@RequestParam(value = "pTheme", required = false) String ptheme, Pageable pageable, HttpServletRequest _request) {
        LOGGER.debug("Executing named query: QryGetThemes");
        Page<QryGetThemesResponse> _result = queryService.executeQryGetThemes(ptheme, pageable);
        LOGGER.debug("got the result for named query: QryGetThemes, result:{}", _result);
        return _result;
    }

    @ApiOperation(value = "Returns downloadable file url for query QryGetThemes")
    @RequestMapping(value = "/queries/QryGetThemes/export", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public StringWrapper exportQryGetThemes(@RequestParam(value = "pTheme", required = false) String ptheme, @RequestBody ExportOptions exportOptions, Pageable pageable) {
        LOGGER.debug("Exporting named query: QryGetThemes");

        String exportedFileName = exportOptions.getFileName();
        if(exportedFileName == null || exportedFileName.isEmpty()) {
            exportedFileName = "QryGetThemes";
        }
        exportedFileName += exportOptions.getExportType().getExtension();

        String exportedUrl = exportedFileManager.registerAndGetURL(exportedFileName,
                        outputStream -> queryService.exportQryGetThemes(ptheme,  exportOptions, pageable, outputStream));

        return new StringWrapper(exportedUrl);
    }

}