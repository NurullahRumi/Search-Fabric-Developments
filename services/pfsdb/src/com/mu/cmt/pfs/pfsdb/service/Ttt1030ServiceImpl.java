/*Copyright (c) 2016-2017 cmt.mu All Rights Reserved.
 This software is the confidential and proprietary information of cmt.mu You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with cmt.mu*/
package com.mu.cmt.pfs.pfsdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.io.OutputStream;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.DataExportOptions;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.mu.cmt.pfs.pfsdb.Ttt1030;


/**
 * ServiceImpl object for domain model class Ttt1030.
 *
 * @see Ttt1030
 */
@Service("pfsdb.Ttt1030Service")
@Validated
public class Ttt1030ServiceImpl implements Ttt1030Service {

    private static final Logger LOGGER = LoggerFactory.getLogger(Ttt1030ServiceImpl.class);


    @Autowired
    @Qualifier("pfsdb.Ttt1030Dao")
    private WMGenericDao<Ttt1030, Long> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Ttt1030, Long> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Ttt1030 create(Ttt1030 ttt1030) {
        LOGGER.debug("Creating a new Ttt1030 with information: {}", ttt1030);

        Ttt1030 ttt1030Created = this.wmGenericDao.create(ttt1030);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(ttt1030Created);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Ttt1030 getById(Long ttt1030Id) {
        LOGGER.debug("Finding Ttt1030 by id: {}", ttt1030Id);
        return this.wmGenericDao.findById(ttt1030Id);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Ttt1030 findById(Long ttt1030Id) {
        LOGGER.debug("Finding Ttt1030 by id: {}", ttt1030Id);
        try {
            return this.wmGenericDao.findById(ttt1030Id);
        } catch (EntityNotFoundException ex) {
            LOGGER.debug("No Ttt1030 found with id: {}", ttt1030Id, ex);
            return null;
        }
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public List<Ttt1030> findByMultipleIds(List<Long> ttt1030Ids, boolean orderedReturn) {
        LOGGER.debug("Finding Ttt1030s by ids: {}", ttt1030Ids);

        return this.wmGenericDao.findByMultipleIds(ttt1030Ids, orderedReturn);
    }


    @Transactional(rollbackFor = EntityNotFoundException.class, value = "pfsdbTransactionManager")
    @Override
    public Ttt1030 update(Ttt1030 ttt1030) {
        LOGGER.debug("Updating Ttt1030 with information: {}", ttt1030);

        this.wmGenericDao.update(ttt1030);
        this.wmGenericDao.refresh(ttt1030);

        return ttt1030;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public Ttt1030 delete(Long ttt1030Id) {
        LOGGER.debug("Deleting Ttt1030 with id: {}", ttt1030Id);
        Ttt1030 deleted = this.wmGenericDao.findById(ttt1030Id);
        if (deleted == null) {
            LOGGER.debug("No Ttt1030 found with id: {}", ttt1030Id);
            throw new EntityNotFoundException(String.valueOf(ttt1030Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "pfsdbTransactionManager")
    @Override
    public void delete(Ttt1030 ttt1030) {
        LOGGER.debug("Deleting Ttt1030 with {}", ttt1030);
        this.wmGenericDao.delete(ttt1030);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Ttt1030> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Ttt1030s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Ttt1030> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Ttt1030s");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service pfsdb for table Ttt1030 to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager", timeout = 300)
    @Override
    public void export(DataExportOptions options, Pageable pageable, OutputStream outputStream) {
        LOGGER.debug("exporting data in the service pfsdb for table Ttt1030 to {} format", options.getExportType());
        this.wmGenericDao.export(options, pageable, outputStream);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "pfsdbTransactionManager")
    @Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}